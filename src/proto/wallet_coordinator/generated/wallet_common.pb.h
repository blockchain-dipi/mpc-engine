// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wallet_common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_wallet_5fcommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_wallet_5fcommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_wallet_5fcommon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_wallet_5fcommon_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_wallet_5fcommon_2eproto;
namespace mpc_engine {
namespace proto {
namespace wallet_coordinator {
class WalletRequestHeader;
struct WalletRequestHeaderDefaultTypeInternal;
extern WalletRequestHeaderDefaultTypeInternal _WalletRequestHeader_default_instance_;
class WalletResponseHeader;
struct WalletResponseHeaderDefaultTypeInternal;
extern WalletResponseHeaderDefaultTypeInternal _WalletResponseHeader_default_instance_;
}  // namespace wallet_coordinator
}  // namespace proto
}  // namespace mpc_engine
PROTOBUF_NAMESPACE_OPEN
template<> ::mpc_engine::proto::wallet_coordinator::WalletRequestHeader* Arena::CreateMaybeMessage<::mpc_engine::proto::wallet_coordinator::WalletRequestHeader>(Arena*);
template<> ::mpc_engine::proto::wallet_coordinator::WalletResponseHeader* Arena::CreateMaybeMessage<::mpc_engine::proto::wallet_coordinator::WalletResponseHeader>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mpc_engine {
namespace proto {
namespace wallet_coordinator {

// ===================================================================

class WalletRequestHeader final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mpc_engine.proto.wallet_coordinator.WalletRequestHeader) */ {
 public:
  inline WalletRequestHeader() : WalletRequestHeader(nullptr) {}
  ~WalletRequestHeader() override;
  explicit PROTOBUF_CONSTEXPR WalletRequestHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WalletRequestHeader(const WalletRequestHeader& from);
  WalletRequestHeader(WalletRequestHeader&& from) noexcept
    : WalletRequestHeader() {
    *this = ::std::move(from);
  }

  inline WalletRequestHeader& operator=(const WalletRequestHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline WalletRequestHeader& operator=(WalletRequestHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WalletRequestHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const WalletRequestHeader* internal_default_instance() {
    return reinterpret_cast<const WalletRequestHeader*>(
               &_WalletRequestHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WalletRequestHeader& a, WalletRequestHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(WalletRequestHeader* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WalletRequestHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WalletRequestHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WalletRequestHeader>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WalletRequestHeader& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WalletRequestHeader& from) {
    WalletRequestHeader::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WalletRequestHeader* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mpc_engine.proto.wallet_coordinator.WalletRequestHeader";
  }
  protected:
  explicit WalletRequestHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 2,
    kTimestampFieldNumber = 3,
    kCoordinatorIdFieldNumber = 4,
    kMessageTypeFieldNumber = 1,
  };
  // string request_id = 2;
  void clear_request_id();
  const std::string& request_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_id();
  PROTOBUF_NODISCARD std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string timestamp = 3;
  void clear_timestamp();
  const std::string& timestamp() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_timestamp(ArgT0&& arg0, ArgT... args);
  std::string* mutable_timestamp();
  PROTOBUF_NODISCARD std::string* release_timestamp();
  void set_allocated_timestamp(std::string* timestamp);
  private:
  const std::string& _internal_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timestamp(const std::string& value);
  std::string* _internal_mutable_timestamp();
  public:

  // string coordinator_id = 4;
  void clear_coordinator_id();
  const std::string& coordinator_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_coordinator_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_coordinator_id();
  PROTOBUF_NODISCARD std::string* release_coordinator_id();
  void set_allocated_coordinator_id(std::string* coordinator_id);
  private:
  const std::string& _internal_coordinator_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_coordinator_id(const std::string& value);
  std::string* _internal_mutable_coordinator_id();
  public:

  // uint32 message_type = 1;
  void clear_message_type();
  uint32_t message_type() const;
  void set_message_type(uint32_t value);
  private:
  uint32_t _internal_message_type() const;
  void _internal_set_message_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mpc_engine.proto.wallet_coordinator.WalletRequestHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timestamp_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr coordinator_id_;
    uint32_t message_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wallet_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class WalletResponseHeader final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mpc_engine.proto.wallet_coordinator.WalletResponseHeader) */ {
 public:
  inline WalletResponseHeader() : WalletResponseHeader(nullptr) {}
  ~WalletResponseHeader() override;
  explicit PROTOBUF_CONSTEXPR WalletResponseHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WalletResponseHeader(const WalletResponseHeader& from);
  WalletResponseHeader(WalletResponseHeader&& from) noexcept
    : WalletResponseHeader() {
    *this = ::std::move(from);
  }

  inline WalletResponseHeader& operator=(const WalletResponseHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline WalletResponseHeader& operator=(WalletResponseHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WalletResponseHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const WalletResponseHeader* internal_default_instance() {
    return reinterpret_cast<const WalletResponseHeader*>(
               &_WalletResponseHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(WalletResponseHeader& a, WalletResponseHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(WalletResponseHeader* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WalletResponseHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WalletResponseHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WalletResponseHeader>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WalletResponseHeader& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WalletResponseHeader& from) {
    WalletResponseHeader::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WalletResponseHeader* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mpc_engine.proto.wallet_coordinator.WalletResponseHeader";
  }
  protected:
  explicit WalletResponseHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMessageFieldNumber = 3,
    kRequestIdFieldNumber = 4,
    kTimestampFieldNumber = 5,
    kMessageTypeFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // string error_message = 3;
  void clear_error_message();
  const std::string& error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // string request_id = 4;
  void clear_request_id();
  const std::string& request_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_id();
  PROTOBUF_NODISCARD std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string timestamp = 5;
  void clear_timestamp();
  const std::string& timestamp() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_timestamp(ArgT0&& arg0, ArgT... args);
  std::string* mutable_timestamp();
  PROTOBUF_NODISCARD std::string* release_timestamp();
  void set_allocated_timestamp(std::string* timestamp);
  private:
  const std::string& _internal_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timestamp(const std::string& value);
  std::string* _internal_mutable_timestamp();
  public:

  // uint32 message_type = 1;
  void clear_message_type();
  uint32_t message_type() const;
  void set_message_type(uint32_t value);
  private:
  uint32_t _internal_message_type() const;
  void _internal_set_message_type(uint32_t value);
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mpc_engine.proto.wallet_coordinator.WalletResponseHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timestamp_;
    uint32_t message_type_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wallet_5fcommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WalletRequestHeader

// uint32 message_type = 1;
inline void WalletRequestHeader::clear_message_type() {
  _impl_.message_type_ = 0u;
}
inline uint32_t WalletRequestHeader::_internal_message_type() const {
  return _impl_.message_type_;
}
inline uint32_t WalletRequestHeader::message_type() const {
  // @@protoc_insertion_point(field_get:mpc_engine.proto.wallet_coordinator.WalletRequestHeader.message_type)
  return _internal_message_type();
}
inline void WalletRequestHeader::_internal_set_message_type(uint32_t value) {
  
  _impl_.message_type_ = value;
}
inline void WalletRequestHeader::set_message_type(uint32_t value) {
  _internal_set_message_type(value);
  // @@protoc_insertion_point(field_set:mpc_engine.proto.wallet_coordinator.WalletRequestHeader.message_type)
}

// string request_id = 2;
inline void WalletRequestHeader::clear_request_id() {
  _impl_.request_id_.ClearToEmpty();
}
inline const std::string& WalletRequestHeader::request_id() const {
  // @@protoc_insertion_point(field_get:mpc_engine.proto.wallet_coordinator.WalletRequestHeader.request_id)
  return _internal_request_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WalletRequestHeader::set_request_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.request_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mpc_engine.proto.wallet_coordinator.WalletRequestHeader.request_id)
}
inline std::string* WalletRequestHeader::mutable_request_id() {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:mpc_engine.proto.wallet_coordinator.WalletRequestHeader.request_id)
  return _s;
}
inline const std::string& WalletRequestHeader::_internal_request_id() const {
  return _impl_.request_id_.Get();
}
inline void WalletRequestHeader::_internal_set_request_id(const std::string& value) {
  
  _impl_.request_id_.Set(value, GetArenaForAllocation());
}
inline std::string* WalletRequestHeader::_internal_mutable_request_id() {
  
  return _impl_.request_id_.Mutable(GetArenaForAllocation());
}
inline std::string* WalletRequestHeader::release_request_id() {
  // @@protoc_insertion_point(field_release:mpc_engine.proto.wallet_coordinator.WalletRequestHeader.request_id)
  return _impl_.request_id_.Release();
}
inline void WalletRequestHeader::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  _impl_.request_id_.SetAllocated(request_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.request_id_.IsDefault()) {
    _impl_.request_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mpc_engine.proto.wallet_coordinator.WalletRequestHeader.request_id)
}

// string timestamp = 3;
inline void WalletRequestHeader::clear_timestamp() {
  _impl_.timestamp_.ClearToEmpty();
}
inline const std::string& WalletRequestHeader::timestamp() const {
  // @@protoc_insertion_point(field_get:mpc_engine.proto.wallet_coordinator.WalletRequestHeader.timestamp)
  return _internal_timestamp();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WalletRequestHeader::set_timestamp(ArgT0&& arg0, ArgT... args) {
 
 _impl_.timestamp_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mpc_engine.proto.wallet_coordinator.WalletRequestHeader.timestamp)
}
inline std::string* WalletRequestHeader::mutable_timestamp() {
  std::string* _s = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:mpc_engine.proto.wallet_coordinator.WalletRequestHeader.timestamp)
  return _s;
}
inline const std::string& WalletRequestHeader::_internal_timestamp() const {
  return _impl_.timestamp_.Get();
}
inline void WalletRequestHeader::_internal_set_timestamp(const std::string& value) {
  
  _impl_.timestamp_.Set(value, GetArenaForAllocation());
}
inline std::string* WalletRequestHeader::_internal_mutable_timestamp() {
  
  return _impl_.timestamp_.Mutable(GetArenaForAllocation());
}
inline std::string* WalletRequestHeader::release_timestamp() {
  // @@protoc_insertion_point(field_release:mpc_engine.proto.wallet_coordinator.WalletRequestHeader.timestamp)
  return _impl_.timestamp_.Release();
}
inline void WalletRequestHeader::set_allocated_timestamp(std::string* timestamp) {
  if (timestamp != nullptr) {
    
  } else {
    
  }
  _impl_.timestamp_.SetAllocated(timestamp, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.timestamp_.IsDefault()) {
    _impl_.timestamp_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mpc_engine.proto.wallet_coordinator.WalletRequestHeader.timestamp)
}

// string coordinator_id = 4;
inline void WalletRequestHeader::clear_coordinator_id() {
  _impl_.coordinator_id_.ClearToEmpty();
}
inline const std::string& WalletRequestHeader::coordinator_id() const {
  // @@protoc_insertion_point(field_get:mpc_engine.proto.wallet_coordinator.WalletRequestHeader.coordinator_id)
  return _internal_coordinator_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WalletRequestHeader::set_coordinator_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.coordinator_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mpc_engine.proto.wallet_coordinator.WalletRequestHeader.coordinator_id)
}
inline std::string* WalletRequestHeader::mutable_coordinator_id() {
  std::string* _s = _internal_mutable_coordinator_id();
  // @@protoc_insertion_point(field_mutable:mpc_engine.proto.wallet_coordinator.WalletRequestHeader.coordinator_id)
  return _s;
}
inline const std::string& WalletRequestHeader::_internal_coordinator_id() const {
  return _impl_.coordinator_id_.Get();
}
inline void WalletRequestHeader::_internal_set_coordinator_id(const std::string& value) {
  
  _impl_.coordinator_id_.Set(value, GetArenaForAllocation());
}
inline std::string* WalletRequestHeader::_internal_mutable_coordinator_id() {
  
  return _impl_.coordinator_id_.Mutable(GetArenaForAllocation());
}
inline std::string* WalletRequestHeader::release_coordinator_id() {
  // @@protoc_insertion_point(field_release:mpc_engine.proto.wallet_coordinator.WalletRequestHeader.coordinator_id)
  return _impl_.coordinator_id_.Release();
}
inline void WalletRequestHeader::set_allocated_coordinator_id(std::string* coordinator_id) {
  if (coordinator_id != nullptr) {
    
  } else {
    
  }
  _impl_.coordinator_id_.SetAllocated(coordinator_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.coordinator_id_.IsDefault()) {
    _impl_.coordinator_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mpc_engine.proto.wallet_coordinator.WalletRequestHeader.coordinator_id)
}

// -------------------------------------------------------------------

// WalletResponseHeader

// uint32 message_type = 1;
inline void WalletResponseHeader::clear_message_type() {
  _impl_.message_type_ = 0u;
}
inline uint32_t WalletResponseHeader::_internal_message_type() const {
  return _impl_.message_type_;
}
inline uint32_t WalletResponseHeader::message_type() const {
  // @@protoc_insertion_point(field_get:mpc_engine.proto.wallet_coordinator.WalletResponseHeader.message_type)
  return _internal_message_type();
}
inline void WalletResponseHeader::_internal_set_message_type(uint32_t value) {
  
  _impl_.message_type_ = value;
}
inline void WalletResponseHeader::set_message_type(uint32_t value) {
  _internal_set_message_type(value);
  // @@protoc_insertion_point(field_set:mpc_engine.proto.wallet_coordinator.WalletResponseHeader.message_type)
}

// bool success = 2;
inline void WalletResponseHeader::clear_success() {
  _impl_.success_ = false;
}
inline bool WalletResponseHeader::_internal_success() const {
  return _impl_.success_;
}
inline bool WalletResponseHeader::success() const {
  // @@protoc_insertion_point(field_get:mpc_engine.proto.wallet_coordinator.WalletResponseHeader.success)
  return _internal_success();
}
inline void WalletResponseHeader::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void WalletResponseHeader::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:mpc_engine.proto.wallet_coordinator.WalletResponseHeader.success)
}

// string error_message = 3;
inline void WalletResponseHeader::clear_error_message() {
  _impl_.error_message_.ClearToEmpty();
}
inline const std::string& WalletResponseHeader::error_message() const {
  // @@protoc_insertion_point(field_get:mpc_engine.proto.wallet_coordinator.WalletResponseHeader.error_message)
  return _internal_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WalletResponseHeader::set_error_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mpc_engine.proto.wallet_coordinator.WalletResponseHeader.error_message)
}
inline std::string* WalletResponseHeader::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:mpc_engine.proto.wallet_coordinator.WalletResponseHeader.error_message)
  return _s;
}
inline const std::string& WalletResponseHeader::_internal_error_message() const {
  return _impl_.error_message_.Get();
}
inline void WalletResponseHeader::_internal_set_error_message(const std::string& value) {
  
  _impl_.error_message_.Set(value, GetArenaForAllocation());
}
inline std::string* WalletResponseHeader::_internal_mutable_error_message() {
  
  return _impl_.error_message_.Mutable(GetArenaForAllocation());
}
inline std::string* WalletResponseHeader::release_error_message() {
  // @@protoc_insertion_point(field_release:mpc_engine.proto.wallet_coordinator.WalletResponseHeader.error_message)
  return _impl_.error_message_.Release();
}
inline void WalletResponseHeader::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  _impl_.error_message_.SetAllocated(error_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mpc_engine.proto.wallet_coordinator.WalletResponseHeader.error_message)
}

// string request_id = 4;
inline void WalletResponseHeader::clear_request_id() {
  _impl_.request_id_.ClearToEmpty();
}
inline const std::string& WalletResponseHeader::request_id() const {
  // @@protoc_insertion_point(field_get:mpc_engine.proto.wallet_coordinator.WalletResponseHeader.request_id)
  return _internal_request_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WalletResponseHeader::set_request_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.request_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mpc_engine.proto.wallet_coordinator.WalletResponseHeader.request_id)
}
inline std::string* WalletResponseHeader::mutable_request_id() {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:mpc_engine.proto.wallet_coordinator.WalletResponseHeader.request_id)
  return _s;
}
inline const std::string& WalletResponseHeader::_internal_request_id() const {
  return _impl_.request_id_.Get();
}
inline void WalletResponseHeader::_internal_set_request_id(const std::string& value) {
  
  _impl_.request_id_.Set(value, GetArenaForAllocation());
}
inline std::string* WalletResponseHeader::_internal_mutable_request_id() {
  
  return _impl_.request_id_.Mutable(GetArenaForAllocation());
}
inline std::string* WalletResponseHeader::release_request_id() {
  // @@protoc_insertion_point(field_release:mpc_engine.proto.wallet_coordinator.WalletResponseHeader.request_id)
  return _impl_.request_id_.Release();
}
inline void WalletResponseHeader::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  _impl_.request_id_.SetAllocated(request_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.request_id_.IsDefault()) {
    _impl_.request_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mpc_engine.proto.wallet_coordinator.WalletResponseHeader.request_id)
}

// string timestamp = 5;
inline void WalletResponseHeader::clear_timestamp() {
  _impl_.timestamp_.ClearToEmpty();
}
inline const std::string& WalletResponseHeader::timestamp() const {
  // @@protoc_insertion_point(field_get:mpc_engine.proto.wallet_coordinator.WalletResponseHeader.timestamp)
  return _internal_timestamp();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WalletResponseHeader::set_timestamp(ArgT0&& arg0, ArgT... args) {
 
 _impl_.timestamp_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mpc_engine.proto.wallet_coordinator.WalletResponseHeader.timestamp)
}
inline std::string* WalletResponseHeader::mutable_timestamp() {
  std::string* _s = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:mpc_engine.proto.wallet_coordinator.WalletResponseHeader.timestamp)
  return _s;
}
inline const std::string& WalletResponseHeader::_internal_timestamp() const {
  return _impl_.timestamp_.Get();
}
inline void WalletResponseHeader::_internal_set_timestamp(const std::string& value) {
  
  _impl_.timestamp_.Set(value, GetArenaForAllocation());
}
inline std::string* WalletResponseHeader::_internal_mutable_timestamp() {
  
  return _impl_.timestamp_.Mutable(GetArenaForAllocation());
}
inline std::string* WalletResponseHeader::release_timestamp() {
  // @@protoc_insertion_point(field_release:mpc_engine.proto.wallet_coordinator.WalletResponseHeader.timestamp)
  return _impl_.timestamp_.Release();
}
inline void WalletResponseHeader::set_allocated_timestamp(std::string* timestamp) {
  if (timestamp != nullptr) {
    
  } else {
    
  }
  _impl_.timestamp_.SetAllocated(timestamp, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.timestamp_.IsDefault()) {
    _impl_.timestamp_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mpc_engine.proto.wallet_coordinator.WalletResponseHeader.timestamp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace wallet_coordinator
}  // namespace proto
}  // namespace mpc_engine

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_wallet_5fcommon_2eproto
