// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wallet_signing.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_wallet_5fsigning_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_wallet_5fsigning_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "wallet_common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_wallet_5fsigning_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_wallet_5fsigning_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_wallet_5fsigning_2eproto;
namespace mpc_engine {
namespace proto {
namespace wallet_coordinator {
class WalletSigningRequest;
struct WalletSigningRequestDefaultTypeInternal;
extern WalletSigningRequestDefaultTypeInternal _WalletSigningRequest_default_instance_;
class WalletSigningResponse;
struct WalletSigningResponseDefaultTypeInternal;
extern WalletSigningResponseDefaultTypeInternal _WalletSigningResponse_default_instance_;
}  // namespace wallet_coordinator
}  // namespace proto
}  // namespace mpc_engine
PROTOBUF_NAMESPACE_OPEN
template<> ::mpc_engine::proto::wallet_coordinator::WalletSigningRequest* Arena::CreateMaybeMessage<::mpc_engine::proto::wallet_coordinator::WalletSigningRequest>(Arena*);
template<> ::mpc_engine::proto::wallet_coordinator::WalletSigningResponse* Arena::CreateMaybeMessage<::mpc_engine::proto::wallet_coordinator::WalletSigningResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mpc_engine {
namespace proto {
namespace wallet_coordinator {

// ===================================================================

class WalletSigningRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mpc_engine.proto.wallet_coordinator.WalletSigningRequest) */ {
 public:
  inline WalletSigningRequest() : WalletSigningRequest(nullptr) {}
  ~WalletSigningRequest() override;
  explicit PROTOBUF_CONSTEXPR WalletSigningRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WalletSigningRequest(const WalletSigningRequest& from);
  WalletSigningRequest(WalletSigningRequest&& from) noexcept
    : WalletSigningRequest() {
    *this = ::std::move(from);
  }

  inline WalletSigningRequest& operator=(const WalletSigningRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WalletSigningRequest& operator=(WalletSigningRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WalletSigningRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WalletSigningRequest* internal_default_instance() {
    return reinterpret_cast<const WalletSigningRequest*>(
               &_WalletSigningRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WalletSigningRequest& a, WalletSigningRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WalletSigningRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WalletSigningRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WalletSigningRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WalletSigningRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WalletSigningRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WalletSigningRequest& from) {
    WalletSigningRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WalletSigningRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mpc_engine.proto.wallet_coordinator.WalletSigningRequest";
  }
  protected:
  explicit WalletSigningRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequiredShardsFieldNumber = 6,
    kKeyIdFieldNumber = 2,
    kTransactionDataFieldNumber = 3,
    kHeaderFieldNumber = 1,
    kThresholdFieldNumber = 4,
    kTotalShardsFieldNumber = 5,
  };
  // repeated string required_shards = 6;
  int required_shards_size() const;
  private:
  int _internal_required_shards_size() const;
  public:
  void clear_required_shards();
  const std::string& required_shards(int index) const;
  std::string* mutable_required_shards(int index);
  void set_required_shards(int index, const std::string& value);
  void set_required_shards(int index, std::string&& value);
  void set_required_shards(int index, const char* value);
  void set_required_shards(int index, const char* value, size_t size);
  std::string* add_required_shards();
  void add_required_shards(const std::string& value);
  void add_required_shards(std::string&& value);
  void add_required_shards(const char* value);
  void add_required_shards(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& required_shards() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_required_shards();
  private:
  const std::string& _internal_required_shards(int index) const;
  std::string* _internal_add_required_shards();
  public:

  // string key_id = 2;
  void clear_key_id();
  const std::string& key_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key_id();
  PROTOBUF_NODISCARD std::string* release_key_id();
  void set_allocated_key_id(std::string* key_id);
  private:
  const std::string& _internal_key_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key_id(const std::string& value);
  std::string* _internal_mutable_key_id();
  public:

  // string transaction_data = 3;
  void clear_transaction_data();
  const std::string& transaction_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_transaction_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_transaction_data();
  PROTOBUF_NODISCARD std::string* release_transaction_data();
  void set_allocated_transaction_data(std::string* transaction_data);
  private:
  const std::string& _internal_transaction_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transaction_data(const std::string& value);
  std::string* _internal_mutable_transaction_data();
  public:

  // .mpc_engine.proto.wallet_coordinator.WalletRequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::mpc_engine::proto::wallet_coordinator::WalletRequestHeader& header() const;
  PROTOBUF_NODISCARD ::mpc_engine::proto::wallet_coordinator::WalletRequestHeader* release_header();
  ::mpc_engine::proto::wallet_coordinator::WalletRequestHeader* mutable_header();
  void set_allocated_header(::mpc_engine::proto::wallet_coordinator::WalletRequestHeader* header);
  private:
  const ::mpc_engine::proto::wallet_coordinator::WalletRequestHeader& _internal_header() const;
  ::mpc_engine::proto::wallet_coordinator::WalletRequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::mpc_engine::proto::wallet_coordinator::WalletRequestHeader* header);
  ::mpc_engine::proto::wallet_coordinator::WalletRequestHeader* unsafe_arena_release_header();

  // uint32 threshold = 4;
  void clear_threshold();
  uint32_t threshold() const;
  void set_threshold(uint32_t value);
  private:
  uint32_t _internal_threshold() const;
  void _internal_set_threshold(uint32_t value);
  public:

  // uint32 total_shards = 5;
  void clear_total_shards();
  uint32_t total_shards() const;
  void set_total_shards(uint32_t value);
  private:
  uint32_t _internal_total_shards() const;
  void _internal_set_total_shards(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mpc_engine.proto.wallet_coordinator.WalletSigningRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> required_shards_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transaction_data_;
    ::mpc_engine::proto::wallet_coordinator::WalletRequestHeader* header_;
    uint32_t threshold_;
    uint32_t total_shards_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wallet_5fsigning_2eproto;
};
// -------------------------------------------------------------------

class WalletSigningResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mpc_engine.proto.wallet_coordinator.WalletSigningResponse) */ {
 public:
  inline WalletSigningResponse() : WalletSigningResponse(nullptr) {}
  ~WalletSigningResponse() override;
  explicit PROTOBUF_CONSTEXPR WalletSigningResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WalletSigningResponse(const WalletSigningResponse& from);
  WalletSigningResponse(WalletSigningResponse&& from) noexcept
    : WalletSigningResponse() {
    *this = ::std::move(from);
  }

  inline WalletSigningResponse& operator=(const WalletSigningResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WalletSigningResponse& operator=(WalletSigningResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WalletSigningResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WalletSigningResponse* internal_default_instance() {
    return reinterpret_cast<const WalletSigningResponse*>(
               &_WalletSigningResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(WalletSigningResponse& a, WalletSigningResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WalletSigningResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WalletSigningResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WalletSigningResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WalletSigningResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WalletSigningResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WalletSigningResponse& from) {
    WalletSigningResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WalletSigningResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mpc_engine.proto.wallet_coordinator.WalletSigningResponse";
  }
  protected:
  explicit WalletSigningResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShardSignaturesFieldNumber = 4,
    kKeyIdFieldNumber = 2,
    kFinalSignatureFieldNumber = 3,
    kHeaderFieldNumber = 1,
    kSuccessfulShardsFieldNumber = 5,
  };
  // repeated string shard_signatures = 4;
  int shard_signatures_size() const;
  private:
  int _internal_shard_signatures_size() const;
  public:
  void clear_shard_signatures();
  const std::string& shard_signatures(int index) const;
  std::string* mutable_shard_signatures(int index);
  void set_shard_signatures(int index, const std::string& value);
  void set_shard_signatures(int index, std::string&& value);
  void set_shard_signatures(int index, const char* value);
  void set_shard_signatures(int index, const char* value, size_t size);
  std::string* add_shard_signatures();
  void add_shard_signatures(const std::string& value);
  void add_shard_signatures(std::string&& value);
  void add_shard_signatures(const char* value);
  void add_shard_signatures(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& shard_signatures() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_shard_signatures();
  private:
  const std::string& _internal_shard_signatures(int index) const;
  std::string* _internal_add_shard_signatures();
  public:

  // string key_id = 2;
  void clear_key_id();
  const std::string& key_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key_id();
  PROTOBUF_NODISCARD std::string* release_key_id();
  void set_allocated_key_id(std::string* key_id);
  private:
  const std::string& _internal_key_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key_id(const std::string& value);
  std::string* _internal_mutable_key_id();
  public:

  // string final_signature = 3;
  void clear_final_signature();
  const std::string& final_signature() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_final_signature(ArgT0&& arg0, ArgT... args);
  std::string* mutable_final_signature();
  PROTOBUF_NODISCARD std::string* release_final_signature();
  void set_allocated_final_signature(std::string* final_signature);
  private:
  const std::string& _internal_final_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_final_signature(const std::string& value);
  std::string* _internal_mutable_final_signature();
  public:

  // .mpc_engine.proto.wallet_coordinator.WalletResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::mpc_engine::proto::wallet_coordinator::WalletResponseHeader& header() const;
  PROTOBUF_NODISCARD ::mpc_engine::proto::wallet_coordinator::WalletResponseHeader* release_header();
  ::mpc_engine::proto::wallet_coordinator::WalletResponseHeader* mutable_header();
  void set_allocated_header(::mpc_engine::proto::wallet_coordinator::WalletResponseHeader* header);
  private:
  const ::mpc_engine::proto::wallet_coordinator::WalletResponseHeader& _internal_header() const;
  ::mpc_engine::proto::wallet_coordinator::WalletResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::mpc_engine::proto::wallet_coordinator::WalletResponseHeader* header);
  ::mpc_engine::proto::wallet_coordinator::WalletResponseHeader* unsafe_arena_release_header();

  // uint32 successful_shards = 5;
  void clear_successful_shards();
  uint32_t successful_shards() const;
  void set_successful_shards(uint32_t value);
  private:
  uint32_t _internal_successful_shards() const;
  void _internal_set_successful_shards(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mpc_engine.proto.wallet_coordinator.WalletSigningResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> shard_signatures_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr final_signature_;
    ::mpc_engine::proto::wallet_coordinator::WalletResponseHeader* header_;
    uint32_t successful_shards_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wallet_5fsigning_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WalletSigningRequest

// .mpc_engine.proto.wallet_coordinator.WalletRequestHeader header = 1;
inline bool WalletSigningRequest::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool WalletSigningRequest::has_header() const {
  return _internal_has_header();
}
inline const ::mpc_engine::proto::wallet_coordinator::WalletRequestHeader& WalletSigningRequest::_internal_header() const {
  const ::mpc_engine::proto::wallet_coordinator::WalletRequestHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::mpc_engine::proto::wallet_coordinator::WalletRequestHeader&>(
      ::mpc_engine::proto::wallet_coordinator::_WalletRequestHeader_default_instance_);
}
inline const ::mpc_engine::proto::wallet_coordinator::WalletRequestHeader& WalletSigningRequest::header() const {
  // @@protoc_insertion_point(field_get:mpc_engine.proto.wallet_coordinator.WalletSigningRequest.header)
  return _internal_header();
}
inline void WalletSigningRequest::unsafe_arena_set_allocated_header(
    ::mpc_engine::proto::wallet_coordinator::WalletRequestHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mpc_engine.proto.wallet_coordinator.WalletSigningRequest.header)
}
inline ::mpc_engine::proto::wallet_coordinator::WalletRequestHeader* WalletSigningRequest::release_header() {
  
  ::mpc_engine::proto::wallet_coordinator::WalletRequestHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mpc_engine::proto::wallet_coordinator::WalletRequestHeader* WalletSigningRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:mpc_engine.proto.wallet_coordinator.WalletSigningRequest.header)
  
  ::mpc_engine::proto::wallet_coordinator::WalletRequestHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::mpc_engine::proto::wallet_coordinator::WalletRequestHeader* WalletSigningRequest::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::mpc_engine::proto::wallet_coordinator::WalletRequestHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::mpc_engine::proto::wallet_coordinator::WalletRequestHeader* WalletSigningRequest::mutable_header() {
  ::mpc_engine::proto::wallet_coordinator::WalletRequestHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:mpc_engine.proto.wallet_coordinator.WalletSigningRequest.header)
  return _msg;
}
inline void WalletSigningRequest::set_allocated_header(::mpc_engine::proto::wallet_coordinator::WalletRequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:mpc_engine.proto.wallet_coordinator.WalletSigningRequest.header)
}

// string key_id = 2;
inline void WalletSigningRequest::clear_key_id() {
  _impl_.key_id_.ClearToEmpty();
}
inline const std::string& WalletSigningRequest::key_id() const {
  // @@protoc_insertion_point(field_get:mpc_engine.proto.wallet_coordinator.WalletSigningRequest.key_id)
  return _internal_key_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WalletSigningRequest::set_key_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mpc_engine.proto.wallet_coordinator.WalletSigningRequest.key_id)
}
inline std::string* WalletSigningRequest::mutable_key_id() {
  std::string* _s = _internal_mutable_key_id();
  // @@protoc_insertion_point(field_mutable:mpc_engine.proto.wallet_coordinator.WalletSigningRequest.key_id)
  return _s;
}
inline const std::string& WalletSigningRequest::_internal_key_id() const {
  return _impl_.key_id_.Get();
}
inline void WalletSigningRequest::_internal_set_key_id(const std::string& value) {
  
  _impl_.key_id_.Set(value, GetArenaForAllocation());
}
inline std::string* WalletSigningRequest::_internal_mutable_key_id() {
  
  return _impl_.key_id_.Mutable(GetArenaForAllocation());
}
inline std::string* WalletSigningRequest::release_key_id() {
  // @@protoc_insertion_point(field_release:mpc_engine.proto.wallet_coordinator.WalletSigningRequest.key_id)
  return _impl_.key_id_.Release();
}
inline void WalletSigningRequest::set_allocated_key_id(std::string* key_id) {
  if (key_id != nullptr) {
    
  } else {
    
  }
  _impl_.key_id_.SetAllocated(key_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_id_.IsDefault()) {
    _impl_.key_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mpc_engine.proto.wallet_coordinator.WalletSigningRequest.key_id)
}

// string transaction_data = 3;
inline void WalletSigningRequest::clear_transaction_data() {
  _impl_.transaction_data_.ClearToEmpty();
}
inline const std::string& WalletSigningRequest::transaction_data() const {
  // @@protoc_insertion_point(field_get:mpc_engine.proto.wallet_coordinator.WalletSigningRequest.transaction_data)
  return _internal_transaction_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WalletSigningRequest::set_transaction_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.transaction_data_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mpc_engine.proto.wallet_coordinator.WalletSigningRequest.transaction_data)
}
inline std::string* WalletSigningRequest::mutable_transaction_data() {
  std::string* _s = _internal_mutable_transaction_data();
  // @@protoc_insertion_point(field_mutable:mpc_engine.proto.wallet_coordinator.WalletSigningRequest.transaction_data)
  return _s;
}
inline const std::string& WalletSigningRequest::_internal_transaction_data() const {
  return _impl_.transaction_data_.Get();
}
inline void WalletSigningRequest::_internal_set_transaction_data(const std::string& value) {
  
  _impl_.transaction_data_.Set(value, GetArenaForAllocation());
}
inline std::string* WalletSigningRequest::_internal_mutable_transaction_data() {
  
  return _impl_.transaction_data_.Mutable(GetArenaForAllocation());
}
inline std::string* WalletSigningRequest::release_transaction_data() {
  // @@protoc_insertion_point(field_release:mpc_engine.proto.wallet_coordinator.WalletSigningRequest.transaction_data)
  return _impl_.transaction_data_.Release();
}
inline void WalletSigningRequest::set_allocated_transaction_data(std::string* transaction_data) {
  if (transaction_data != nullptr) {
    
  } else {
    
  }
  _impl_.transaction_data_.SetAllocated(transaction_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.transaction_data_.IsDefault()) {
    _impl_.transaction_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mpc_engine.proto.wallet_coordinator.WalletSigningRequest.transaction_data)
}

// uint32 threshold = 4;
inline void WalletSigningRequest::clear_threshold() {
  _impl_.threshold_ = 0u;
}
inline uint32_t WalletSigningRequest::_internal_threshold() const {
  return _impl_.threshold_;
}
inline uint32_t WalletSigningRequest::threshold() const {
  // @@protoc_insertion_point(field_get:mpc_engine.proto.wallet_coordinator.WalletSigningRequest.threshold)
  return _internal_threshold();
}
inline void WalletSigningRequest::_internal_set_threshold(uint32_t value) {
  
  _impl_.threshold_ = value;
}
inline void WalletSigningRequest::set_threshold(uint32_t value) {
  _internal_set_threshold(value);
  // @@protoc_insertion_point(field_set:mpc_engine.proto.wallet_coordinator.WalletSigningRequest.threshold)
}

// uint32 total_shards = 5;
inline void WalletSigningRequest::clear_total_shards() {
  _impl_.total_shards_ = 0u;
}
inline uint32_t WalletSigningRequest::_internal_total_shards() const {
  return _impl_.total_shards_;
}
inline uint32_t WalletSigningRequest::total_shards() const {
  // @@protoc_insertion_point(field_get:mpc_engine.proto.wallet_coordinator.WalletSigningRequest.total_shards)
  return _internal_total_shards();
}
inline void WalletSigningRequest::_internal_set_total_shards(uint32_t value) {
  
  _impl_.total_shards_ = value;
}
inline void WalletSigningRequest::set_total_shards(uint32_t value) {
  _internal_set_total_shards(value);
  // @@protoc_insertion_point(field_set:mpc_engine.proto.wallet_coordinator.WalletSigningRequest.total_shards)
}

// repeated string required_shards = 6;
inline int WalletSigningRequest::_internal_required_shards_size() const {
  return _impl_.required_shards_.size();
}
inline int WalletSigningRequest::required_shards_size() const {
  return _internal_required_shards_size();
}
inline void WalletSigningRequest::clear_required_shards() {
  _impl_.required_shards_.Clear();
}
inline std::string* WalletSigningRequest::add_required_shards() {
  std::string* _s = _internal_add_required_shards();
  // @@protoc_insertion_point(field_add_mutable:mpc_engine.proto.wallet_coordinator.WalletSigningRequest.required_shards)
  return _s;
}
inline const std::string& WalletSigningRequest::_internal_required_shards(int index) const {
  return _impl_.required_shards_.Get(index);
}
inline const std::string& WalletSigningRequest::required_shards(int index) const {
  // @@protoc_insertion_point(field_get:mpc_engine.proto.wallet_coordinator.WalletSigningRequest.required_shards)
  return _internal_required_shards(index);
}
inline std::string* WalletSigningRequest::mutable_required_shards(int index) {
  // @@protoc_insertion_point(field_mutable:mpc_engine.proto.wallet_coordinator.WalletSigningRequest.required_shards)
  return _impl_.required_shards_.Mutable(index);
}
inline void WalletSigningRequest::set_required_shards(int index, const std::string& value) {
  _impl_.required_shards_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:mpc_engine.proto.wallet_coordinator.WalletSigningRequest.required_shards)
}
inline void WalletSigningRequest::set_required_shards(int index, std::string&& value) {
  _impl_.required_shards_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:mpc_engine.proto.wallet_coordinator.WalletSigningRequest.required_shards)
}
inline void WalletSigningRequest::set_required_shards(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.required_shards_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mpc_engine.proto.wallet_coordinator.WalletSigningRequest.required_shards)
}
inline void WalletSigningRequest::set_required_shards(int index, const char* value, size_t size) {
  _impl_.required_shards_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mpc_engine.proto.wallet_coordinator.WalletSigningRequest.required_shards)
}
inline std::string* WalletSigningRequest::_internal_add_required_shards() {
  return _impl_.required_shards_.Add();
}
inline void WalletSigningRequest::add_required_shards(const std::string& value) {
  _impl_.required_shards_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mpc_engine.proto.wallet_coordinator.WalletSigningRequest.required_shards)
}
inline void WalletSigningRequest::add_required_shards(std::string&& value) {
  _impl_.required_shards_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mpc_engine.proto.wallet_coordinator.WalletSigningRequest.required_shards)
}
inline void WalletSigningRequest::add_required_shards(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.required_shards_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mpc_engine.proto.wallet_coordinator.WalletSigningRequest.required_shards)
}
inline void WalletSigningRequest::add_required_shards(const char* value, size_t size) {
  _impl_.required_shards_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mpc_engine.proto.wallet_coordinator.WalletSigningRequest.required_shards)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
WalletSigningRequest::required_shards() const {
  // @@protoc_insertion_point(field_list:mpc_engine.proto.wallet_coordinator.WalletSigningRequest.required_shards)
  return _impl_.required_shards_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
WalletSigningRequest::mutable_required_shards() {
  // @@protoc_insertion_point(field_mutable_list:mpc_engine.proto.wallet_coordinator.WalletSigningRequest.required_shards)
  return &_impl_.required_shards_;
}

// -------------------------------------------------------------------

// WalletSigningResponse

// .mpc_engine.proto.wallet_coordinator.WalletResponseHeader header = 1;
inline bool WalletSigningResponse::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool WalletSigningResponse::has_header() const {
  return _internal_has_header();
}
inline const ::mpc_engine::proto::wallet_coordinator::WalletResponseHeader& WalletSigningResponse::_internal_header() const {
  const ::mpc_engine::proto::wallet_coordinator::WalletResponseHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::mpc_engine::proto::wallet_coordinator::WalletResponseHeader&>(
      ::mpc_engine::proto::wallet_coordinator::_WalletResponseHeader_default_instance_);
}
inline const ::mpc_engine::proto::wallet_coordinator::WalletResponseHeader& WalletSigningResponse::header() const {
  // @@protoc_insertion_point(field_get:mpc_engine.proto.wallet_coordinator.WalletSigningResponse.header)
  return _internal_header();
}
inline void WalletSigningResponse::unsafe_arena_set_allocated_header(
    ::mpc_engine::proto::wallet_coordinator::WalletResponseHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mpc_engine.proto.wallet_coordinator.WalletSigningResponse.header)
}
inline ::mpc_engine::proto::wallet_coordinator::WalletResponseHeader* WalletSigningResponse::release_header() {
  
  ::mpc_engine::proto::wallet_coordinator::WalletResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mpc_engine::proto::wallet_coordinator::WalletResponseHeader* WalletSigningResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:mpc_engine.proto.wallet_coordinator.WalletSigningResponse.header)
  
  ::mpc_engine::proto::wallet_coordinator::WalletResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::mpc_engine::proto::wallet_coordinator::WalletResponseHeader* WalletSigningResponse::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::mpc_engine::proto::wallet_coordinator::WalletResponseHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::mpc_engine::proto::wallet_coordinator::WalletResponseHeader* WalletSigningResponse::mutable_header() {
  ::mpc_engine::proto::wallet_coordinator::WalletResponseHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:mpc_engine.proto.wallet_coordinator.WalletSigningResponse.header)
  return _msg;
}
inline void WalletSigningResponse::set_allocated_header(::mpc_engine::proto::wallet_coordinator::WalletResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:mpc_engine.proto.wallet_coordinator.WalletSigningResponse.header)
}

// string key_id = 2;
inline void WalletSigningResponse::clear_key_id() {
  _impl_.key_id_.ClearToEmpty();
}
inline const std::string& WalletSigningResponse::key_id() const {
  // @@protoc_insertion_point(field_get:mpc_engine.proto.wallet_coordinator.WalletSigningResponse.key_id)
  return _internal_key_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WalletSigningResponse::set_key_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mpc_engine.proto.wallet_coordinator.WalletSigningResponse.key_id)
}
inline std::string* WalletSigningResponse::mutable_key_id() {
  std::string* _s = _internal_mutable_key_id();
  // @@protoc_insertion_point(field_mutable:mpc_engine.proto.wallet_coordinator.WalletSigningResponse.key_id)
  return _s;
}
inline const std::string& WalletSigningResponse::_internal_key_id() const {
  return _impl_.key_id_.Get();
}
inline void WalletSigningResponse::_internal_set_key_id(const std::string& value) {
  
  _impl_.key_id_.Set(value, GetArenaForAllocation());
}
inline std::string* WalletSigningResponse::_internal_mutable_key_id() {
  
  return _impl_.key_id_.Mutable(GetArenaForAllocation());
}
inline std::string* WalletSigningResponse::release_key_id() {
  // @@protoc_insertion_point(field_release:mpc_engine.proto.wallet_coordinator.WalletSigningResponse.key_id)
  return _impl_.key_id_.Release();
}
inline void WalletSigningResponse::set_allocated_key_id(std::string* key_id) {
  if (key_id != nullptr) {
    
  } else {
    
  }
  _impl_.key_id_.SetAllocated(key_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_id_.IsDefault()) {
    _impl_.key_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mpc_engine.proto.wallet_coordinator.WalletSigningResponse.key_id)
}

// string final_signature = 3;
inline void WalletSigningResponse::clear_final_signature() {
  _impl_.final_signature_.ClearToEmpty();
}
inline const std::string& WalletSigningResponse::final_signature() const {
  // @@protoc_insertion_point(field_get:mpc_engine.proto.wallet_coordinator.WalletSigningResponse.final_signature)
  return _internal_final_signature();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WalletSigningResponse::set_final_signature(ArgT0&& arg0, ArgT... args) {
 
 _impl_.final_signature_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mpc_engine.proto.wallet_coordinator.WalletSigningResponse.final_signature)
}
inline std::string* WalletSigningResponse::mutable_final_signature() {
  std::string* _s = _internal_mutable_final_signature();
  // @@protoc_insertion_point(field_mutable:mpc_engine.proto.wallet_coordinator.WalletSigningResponse.final_signature)
  return _s;
}
inline const std::string& WalletSigningResponse::_internal_final_signature() const {
  return _impl_.final_signature_.Get();
}
inline void WalletSigningResponse::_internal_set_final_signature(const std::string& value) {
  
  _impl_.final_signature_.Set(value, GetArenaForAllocation());
}
inline std::string* WalletSigningResponse::_internal_mutable_final_signature() {
  
  return _impl_.final_signature_.Mutable(GetArenaForAllocation());
}
inline std::string* WalletSigningResponse::release_final_signature() {
  // @@protoc_insertion_point(field_release:mpc_engine.proto.wallet_coordinator.WalletSigningResponse.final_signature)
  return _impl_.final_signature_.Release();
}
inline void WalletSigningResponse::set_allocated_final_signature(std::string* final_signature) {
  if (final_signature != nullptr) {
    
  } else {
    
  }
  _impl_.final_signature_.SetAllocated(final_signature, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.final_signature_.IsDefault()) {
    _impl_.final_signature_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mpc_engine.proto.wallet_coordinator.WalletSigningResponse.final_signature)
}

// repeated string shard_signatures = 4;
inline int WalletSigningResponse::_internal_shard_signatures_size() const {
  return _impl_.shard_signatures_.size();
}
inline int WalletSigningResponse::shard_signatures_size() const {
  return _internal_shard_signatures_size();
}
inline void WalletSigningResponse::clear_shard_signatures() {
  _impl_.shard_signatures_.Clear();
}
inline std::string* WalletSigningResponse::add_shard_signatures() {
  std::string* _s = _internal_add_shard_signatures();
  // @@protoc_insertion_point(field_add_mutable:mpc_engine.proto.wallet_coordinator.WalletSigningResponse.shard_signatures)
  return _s;
}
inline const std::string& WalletSigningResponse::_internal_shard_signatures(int index) const {
  return _impl_.shard_signatures_.Get(index);
}
inline const std::string& WalletSigningResponse::shard_signatures(int index) const {
  // @@protoc_insertion_point(field_get:mpc_engine.proto.wallet_coordinator.WalletSigningResponse.shard_signatures)
  return _internal_shard_signatures(index);
}
inline std::string* WalletSigningResponse::mutable_shard_signatures(int index) {
  // @@protoc_insertion_point(field_mutable:mpc_engine.proto.wallet_coordinator.WalletSigningResponse.shard_signatures)
  return _impl_.shard_signatures_.Mutable(index);
}
inline void WalletSigningResponse::set_shard_signatures(int index, const std::string& value) {
  _impl_.shard_signatures_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:mpc_engine.proto.wallet_coordinator.WalletSigningResponse.shard_signatures)
}
inline void WalletSigningResponse::set_shard_signatures(int index, std::string&& value) {
  _impl_.shard_signatures_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:mpc_engine.proto.wallet_coordinator.WalletSigningResponse.shard_signatures)
}
inline void WalletSigningResponse::set_shard_signatures(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.shard_signatures_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mpc_engine.proto.wallet_coordinator.WalletSigningResponse.shard_signatures)
}
inline void WalletSigningResponse::set_shard_signatures(int index, const char* value, size_t size) {
  _impl_.shard_signatures_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mpc_engine.proto.wallet_coordinator.WalletSigningResponse.shard_signatures)
}
inline std::string* WalletSigningResponse::_internal_add_shard_signatures() {
  return _impl_.shard_signatures_.Add();
}
inline void WalletSigningResponse::add_shard_signatures(const std::string& value) {
  _impl_.shard_signatures_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mpc_engine.proto.wallet_coordinator.WalletSigningResponse.shard_signatures)
}
inline void WalletSigningResponse::add_shard_signatures(std::string&& value) {
  _impl_.shard_signatures_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mpc_engine.proto.wallet_coordinator.WalletSigningResponse.shard_signatures)
}
inline void WalletSigningResponse::add_shard_signatures(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.shard_signatures_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mpc_engine.proto.wallet_coordinator.WalletSigningResponse.shard_signatures)
}
inline void WalletSigningResponse::add_shard_signatures(const char* value, size_t size) {
  _impl_.shard_signatures_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mpc_engine.proto.wallet_coordinator.WalletSigningResponse.shard_signatures)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
WalletSigningResponse::shard_signatures() const {
  // @@protoc_insertion_point(field_list:mpc_engine.proto.wallet_coordinator.WalletSigningResponse.shard_signatures)
  return _impl_.shard_signatures_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
WalletSigningResponse::mutable_shard_signatures() {
  // @@protoc_insertion_point(field_mutable_list:mpc_engine.proto.wallet_coordinator.WalletSigningResponse.shard_signatures)
  return &_impl_.shard_signatures_;
}

// uint32 successful_shards = 5;
inline void WalletSigningResponse::clear_successful_shards() {
  _impl_.successful_shards_ = 0u;
}
inline uint32_t WalletSigningResponse::_internal_successful_shards() const {
  return _impl_.successful_shards_;
}
inline uint32_t WalletSigningResponse::successful_shards() const {
  // @@protoc_insertion_point(field_get:mpc_engine.proto.wallet_coordinator.WalletSigningResponse.successful_shards)
  return _internal_successful_shards();
}
inline void WalletSigningResponse::_internal_set_successful_shards(uint32_t value) {
  
  _impl_.successful_shards_ = value;
}
inline void WalletSigningResponse::set_successful_shards(uint32_t value) {
  _internal_set_successful_shards(value);
  // @@protoc_insertion_point(field_set:mpc_engine.proto.wallet_coordinator.WalletSigningResponse.successful_shards)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace wallet_coordinator
}  // namespace proto
}  // namespace mpc_engine

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_wallet_5fsigning_2eproto
