// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wallet_common.proto

#include "wallet_common.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace mpc_engine {
namespace proto {
namespace wallet_coordinator {
PROTOBUF_CONSTEXPR WalletRequestHeader::WalletRequestHeader(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.request_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.coordinator_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_type_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WalletRequestHeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WalletRequestHeaderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WalletRequestHeaderDefaultTypeInternal() {}
  union {
    WalletRequestHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WalletRequestHeaderDefaultTypeInternal _WalletRequestHeader_default_instance_;
PROTOBUF_CONSTEXPR WalletResponseHeader::WalletResponseHeader(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.request_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_type_)*/0u
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WalletResponseHeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WalletResponseHeaderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WalletResponseHeaderDefaultTypeInternal() {}
  union {
    WalletResponseHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WalletResponseHeaderDefaultTypeInternal _WalletResponseHeader_default_instance_;
}  // namespace wallet_coordinator
}  // namespace proto
}  // namespace mpc_engine
static ::_pb::Metadata file_level_metadata_wallet_5fcommon_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_wallet_5fcommon_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_wallet_5fcommon_2eproto = nullptr;

const uint32_t TableStruct_wallet_5fcommon_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mpc_engine::proto::wallet_coordinator::WalletRequestHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mpc_engine::proto::wallet_coordinator::WalletRequestHeader, _impl_.message_type_),
  PROTOBUF_FIELD_OFFSET(::mpc_engine::proto::wallet_coordinator::WalletRequestHeader, _impl_.request_id_),
  PROTOBUF_FIELD_OFFSET(::mpc_engine::proto::wallet_coordinator::WalletRequestHeader, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::mpc_engine::proto::wallet_coordinator::WalletRequestHeader, _impl_.coordinator_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mpc_engine::proto::wallet_coordinator::WalletResponseHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mpc_engine::proto::wallet_coordinator::WalletResponseHeader, _impl_.message_type_),
  PROTOBUF_FIELD_OFFSET(::mpc_engine::proto::wallet_coordinator::WalletResponseHeader, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::mpc_engine::proto::wallet_coordinator::WalletResponseHeader, _impl_.error_message_),
  PROTOBUF_FIELD_OFFSET(::mpc_engine::proto::wallet_coordinator::WalletResponseHeader, _impl_.request_id_),
  PROTOBUF_FIELD_OFFSET(::mpc_engine::proto::wallet_coordinator::WalletResponseHeader, _impl_.timestamp_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::mpc_engine::proto::wallet_coordinator::WalletRequestHeader)},
  { 10, -1, -1, sizeof(::mpc_engine::proto::wallet_coordinator::WalletResponseHeader)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::mpc_engine::proto::wallet_coordinator::_WalletRequestHeader_default_instance_._instance,
  &::mpc_engine::proto::wallet_coordinator::_WalletResponseHeader_default_instance_._instance,
};

const char descriptor_table_protodef_wallet_5fcommon_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023wallet_common.proto\022#mpc_engine.proto."
  "wallet_coordinator\"j\n\023WalletRequestHeade"
  "r\022\024\n\014message_type\030\001 \001(\r\022\022\n\nrequest_id\030\002 "
  "\001(\t\022\021\n\ttimestamp\030\003 \001(\t\022\026\n\016coordinator_id"
  "\030\004 \001(\t\"{\n\024WalletResponseHeader\022\024\n\014messag"
  "e_type\030\001 \001(\r\022\017\n\007success\030\002 \001(\010\022\025\n\rerror_m"
  "essage\030\003 \001(\t\022\022\n\nrequest_id\030\004 \001(\t\022\021\n\ttime"
  "stamp\030\005 \001(\tb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_wallet_5fcommon_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_wallet_5fcommon_2eproto = {
    false, false, 299, descriptor_table_protodef_wallet_5fcommon_2eproto,
    "wallet_common.proto",
    &descriptor_table_wallet_5fcommon_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_wallet_5fcommon_2eproto::offsets,
    file_level_metadata_wallet_5fcommon_2eproto, file_level_enum_descriptors_wallet_5fcommon_2eproto,
    file_level_service_descriptors_wallet_5fcommon_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_wallet_5fcommon_2eproto_getter() {
  return &descriptor_table_wallet_5fcommon_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_wallet_5fcommon_2eproto(&descriptor_table_wallet_5fcommon_2eproto);
namespace mpc_engine {
namespace proto {
namespace wallet_coordinator {

// ===================================================================

class WalletRequestHeader::_Internal {
 public:
};

WalletRequestHeader::WalletRequestHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mpc_engine.proto.wallet_coordinator.WalletRequestHeader)
}
WalletRequestHeader::WalletRequestHeader(const WalletRequestHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WalletRequestHeader* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.request_id_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.coordinator_id_){}
    , decltype(_impl_.message_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    _this->_impl_.request_id_.Set(from._internal_request_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.timestamp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.timestamp_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_timestamp().empty()) {
    _this->_impl_.timestamp_.Set(from._internal_timestamp(), 
      _this->GetArenaForAllocation());
  }
  _impl_.coordinator_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.coordinator_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_coordinator_id().empty()) {
    _this->_impl_.coordinator_id_.Set(from._internal_coordinator_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.message_type_ = from._impl_.message_type_;
  // @@protoc_insertion_point(copy_constructor:mpc_engine.proto.wallet_coordinator.WalletRequestHeader)
}

inline void WalletRequestHeader::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.request_id_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.coordinator_id_){}
    , decltype(_impl_.message_type_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.timestamp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.timestamp_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.coordinator_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.coordinator_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WalletRequestHeader::~WalletRequestHeader() {
  // @@protoc_insertion_point(destructor:mpc_engine.proto.wallet_coordinator.WalletRequestHeader)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WalletRequestHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.request_id_.Destroy();
  _impl_.timestamp_.Destroy();
  _impl_.coordinator_id_.Destroy();
}

void WalletRequestHeader::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WalletRequestHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:mpc_engine.proto.wallet_coordinator.WalletRequestHeader)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.request_id_.ClearToEmpty();
  _impl_.timestamp_.ClearToEmpty();
  _impl_.coordinator_id_.ClearToEmpty();
  _impl_.message_type_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WalletRequestHeader::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 message_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.message_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string request_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mpc_engine.proto.wallet_coordinator.WalletRequestHeader.request_id"));
        } else
          goto handle_unusual;
        continue;
      // string timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_timestamp();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mpc_engine.proto.wallet_coordinator.WalletRequestHeader.timestamp"));
        } else
          goto handle_unusual;
        continue;
      // string coordinator_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_coordinator_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mpc_engine.proto.wallet_coordinator.WalletRequestHeader.coordinator_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WalletRequestHeader::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpc_engine.proto.wallet_coordinator.WalletRequestHeader)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 message_type = 1;
  if (this->_internal_message_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_message_type(), target);
  }

  // string request_id = 2;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mpc_engine.proto.wallet_coordinator.WalletRequestHeader.request_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_request_id(), target);
  }

  // string timestamp = 3;
  if (!this->_internal_timestamp().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_timestamp().data(), static_cast<int>(this->_internal_timestamp().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mpc_engine.proto.wallet_coordinator.WalletRequestHeader.timestamp");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_timestamp(), target);
  }

  // string coordinator_id = 4;
  if (!this->_internal_coordinator_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_coordinator_id().data(), static_cast<int>(this->_internal_coordinator_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mpc_engine.proto.wallet_coordinator.WalletRequestHeader.coordinator_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_coordinator_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpc_engine.proto.wallet_coordinator.WalletRequestHeader)
  return target;
}

size_t WalletRequestHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mpc_engine.proto.wallet_coordinator.WalletRequestHeader)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 2;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string timestamp = 3;
  if (!this->_internal_timestamp().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_timestamp());
  }

  // string coordinator_id = 4;
  if (!this->_internal_coordinator_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_coordinator_id());
  }

  // uint32 message_type = 1;
  if (this->_internal_message_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_message_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WalletRequestHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WalletRequestHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WalletRequestHeader::GetClassData() const { return &_class_data_; }


void WalletRequestHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WalletRequestHeader*>(&to_msg);
  auto& from = static_cast<const WalletRequestHeader&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mpc_engine.proto.wallet_coordinator.WalletRequestHeader)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_request_id().empty()) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  if (!from._internal_timestamp().empty()) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (!from._internal_coordinator_id().empty()) {
    _this->_internal_set_coordinator_id(from._internal_coordinator_id());
  }
  if (from._internal_message_type() != 0) {
    _this->_internal_set_message_type(from._internal_message_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WalletRequestHeader::CopyFrom(const WalletRequestHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpc_engine.proto.wallet_coordinator.WalletRequestHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WalletRequestHeader::IsInitialized() const {
  return true;
}

void WalletRequestHeader::InternalSwap(WalletRequestHeader* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.request_id_, lhs_arena,
      &other->_impl_.request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.timestamp_, lhs_arena,
      &other->_impl_.timestamp_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.coordinator_id_, lhs_arena,
      &other->_impl_.coordinator_id_, rhs_arena
  );
  swap(_impl_.message_type_, other->_impl_.message_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WalletRequestHeader::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_wallet_5fcommon_2eproto_getter, &descriptor_table_wallet_5fcommon_2eproto_once,
      file_level_metadata_wallet_5fcommon_2eproto[0]);
}

// ===================================================================

class WalletResponseHeader::_Internal {
 public:
};

WalletResponseHeader::WalletResponseHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mpc_engine.proto.wallet_coordinator.WalletResponseHeader)
}
WalletResponseHeader::WalletResponseHeader(const WalletResponseHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WalletResponseHeader* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_message_){}
    , decltype(_impl_.request_id_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.message_type_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), 
      _this->GetArenaForAllocation());
  }
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    _this->_impl_.request_id_.Set(from._internal_request_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.timestamp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.timestamp_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_timestamp().empty()) {
    _this->_impl_.timestamp_.Set(from._internal_timestamp(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.message_type_, &from._impl_.message_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.success_) -
    reinterpret_cast<char*>(&_impl_.message_type_)) + sizeof(_impl_.success_));
  // @@protoc_insertion_point(copy_constructor:mpc_engine.proto.wallet_coordinator.WalletResponseHeader)
}

inline void WalletResponseHeader::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.error_message_){}
    , decltype(_impl_.request_id_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.message_type_){0u}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.timestamp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.timestamp_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WalletResponseHeader::~WalletResponseHeader() {
  // @@protoc_insertion_point(destructor:mpc_engine.proto.wallet_coordinator.WalletResponseHeader)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WalletResponseHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_message_.Destroy();
  _impl_.request_id_.Destroy();
  _impl_.timestamp_.Destroy();
}

void WalletResponseHeader::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WalletResponseHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:mpc_engine.proto.wallet_coordinator.WalletResponseHeader)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.error_message_.ClearToEmpty();
  _impl_.request_id_.ClearToEmpty();
  _impl_.timestamp_.ClearToEmpty();
  ::memset(&_impl_.message_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.success_) -
      reinterpret_cast<char*>(&_impl_.message_type_)) + sizeof(_impl_.success_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WalletResponseHeader::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 message_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.message_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mpc_engine.proto.wallet_coordinator.WalletResponseHeader.error_message"));
        } else
          goto handle_unusual;
        continue;
      // string request_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mpc_engine.proto.wallet_coordinator.WalletResponseHeader.request_id"));
        } else
          goto handle_unusual;
        continue;
      // string timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_timestamp();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mpc_engine.proto.wallet_coordinator.WalletResponseHeader.timestamp"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WalletResponseHeader::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpc_engine.proto.wallet_coordinator.WalletResponseHeader)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 message_type = 1;
  if (this->_internal_message_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_message_type(), target);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  // string error_message = 3;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mpc_engine.proto.wallet_coordinator.WalletResponseHeader.error_message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error_message(), target);
  }

  // string request_id = 4;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mpc_engine.proto.wallet_coordinator.WalletResponseHeader.request_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_request_id(), target);
  }

  // string timestamp = 5;
  if (!this->_internal_timestamp().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_timestamp().data(), static_cast<int>(this->_internal_timestamp().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mpc_engine.proto.wallet_coordinator.WalletResponseHeader.timestamp");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpc_engine.proto.wallet_coordinator.WalletResponseHeader)
  return target;
}

size_t WalletResponseHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mpc_engine.proto.wallet_coordinator.WalletResponseHeader)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_message = 3;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // string request_id = 4;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string timestamp = 5;
  if (!this->_internal_timestamp().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_timestamp());
  }

  // uint32 message_type = 1;
  if (this->_internal_message_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_message_type());
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WalletResponseHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WalletResponseHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WalletResponseHeader::GetClassData() const { return &_class_data_; }


void WalletResponseHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WalletResponseHeader*>(&to_msg);
  auto& from = static_cast<const WalletResponseHeader&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mpc_engine.proto.wallet_coordinator.WalletResponseHeader)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (!from._internal_request_id().empty()) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  if (!from._internal_timestamp().empty()) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_message_type() != 0) {
    _this->_internal_set_message_type(from._internal_message_type());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WalletResponseHeader::CopyFrom(const WalletResponseHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpc_engine.proto.wallet_coordinator.WalletResponseHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WalletResponseHeader::IsInitialized() const {
  return true;
}

void WalletResponseHeader::InternalSwap(WalletResponseHeader* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_message_, lhs_arena,
      &other->_impl_.error_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.request_id_, lhs_arena,
      &other->_impl_.request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.timestamp_, lhs_arena,
      &other->_impl_.timestamp_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WalletResponseHeader, _impl_.success_)
      + sizeof(WalletResponseHeader::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(WalletResponseHeader, _impl_.message_type_)>(
          reinterpret_cast<char*>(&_impl_.message_type_),
          reinterpret_cast<char*>(&other->_impl_.message_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WalletResponseHeader::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_wallet_5fcommon_2eproto_getter, &descriptor_table_wallet_5fcommon_2eproto_once,
      file_level_metadata_wallet_5fcommon_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace wallet_coordinator
}  // namespace proto
}  // namespace mpc_engine
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mpc_engine::proto::wallet_coordinator::WalletRequestHeader*
Arena::CreateMaybeMessage< ::mpc_engine::proto::wallet_coordinator::WalletRequestHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mpc_engine::proto::wallet_coordinator::WalletRequestHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::mpc_engine::proto::wallet_coordinator::WalletResponseHeader*
Arena::CreateMaybeMessage< ::mpc_engine::proto::wallet_coordinator::WalletResponseHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mpc_engine::proto::wallet_coordinator::WalletResponseHeader >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
