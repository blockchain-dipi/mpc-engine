// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wallet_signing.proto

#include "wallet_signing.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace mpc_engine {
namespace proto {
namespace wallet_coordinator {
PROTOBUF_CONSTEXPR WalletSigningRequest::WalletSigningRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.required_shards_)*/{}
  , /*decltype(_impl_.key_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.transaction_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.threshold_)*/0u
  , /*decltype(_impl_.total_shards_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WalletSigningRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WalletSigningRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WalletSigningRequestDefaultTypeInternal() {}
  union {
    WalletSigningRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WalletSigningRequestDefaultTypeInternal _WalletSigningRequest_default_instance_;
PROTOBUF_CONSTEXPR WalletSigningResponse::WalletSigningResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.shard_signatures_)*/{}
  , /*decltype(_impl_.key_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.final_signature_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.successful_shards_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WalletSigningResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WalletSigningResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WalletSigningResponseDefaultTypeInternal() {}
  union {
    WalletSigningResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WalletSigningResponseDefaultTypeInternal _WalletSigningResponse_default_instance_;
}  // namespace wallet_coordinator
}  // namespace proto
}  // namespace mpc_engine
static ::_pb::Metadata file_level_metadata_wallet_5fsigning_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_wallet_5fsigning_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_wallet_5fsigning_2eproto = nullptr;

const uint32_t TableStruct_wallet_5fsigning_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mpc_engine::proto::wallet_coordinator::WalletSigningRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mpc_engine::proto::wallet_coordinator::WalletSigningRequest, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::mpc_engine::proto::wallet_coordinator::WalletSigningRequest, _impl_.key_id_),
  PROTOBUF_FIELD_OFFSET(::mpc_engine::proto::wallet_coordinator::WalletSigningRequest, _impl_.transaction_data_),
  PROTOBUF_FIELD_OFFSET(::mpc_engine::proto::wallet_coordinator::WalletSigningRequest, _impl_.threshold_),
  PROTOBUF_FIELD_OFFSET(::mpc_engine::proto::wallet_coordinator::WalletSigningRequest, _impl_.total_shards_),
  PROTOBUF_FIELD_OFFSET(::mpc_engine::proto::wallet_coordinator::WalletSigningRequest, _impl_.required_shards_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mpc_engine::proto::wallet_coordinator::WalletSigningResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mpc_engine::proto::wallet_coordinator::WalletSigningResponse, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::mpc_engine::proto::wallet_coordinator::WalletSigningResponse, _impl_.key_id_),
  PROTOBUF_FIELD_OFFSET(::mpc_engine::proto::wallet_coordinator::WalletSigningResponse, _impl_.final_signature_),
  PROTOBUF_FIELD_OFFSET(::mpc_engine::proto::wallet_coordinator::WalletSigningResponse, _impl_.shard_signatures_),
  PROTOBUF_FIELD_OFFSET(::mpc_engine::proto::wallet_coordinator::WalletSigningResponse, _impl_.successful_shards_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::mpc_engine::proto::wallet_coordinator::WalletSigningRequest)},
  { 12, -1, -1, sizeof(::mpc_engine::proto::wallet_coordinator::WalletSigningResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::mpc_engine::proto::wallet_coordinator::_WalletSigningRequest_default_instance_._instance,
  &::mpc_engine::proto::wallet_coordinator::_WalletSigningResponse_default_instance_._instance,
};

const char descriptor_table_protodef_wallet_5fsigning_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024wallet_signing.proto\022#mpc_engine.proto"
  ".wallet_coordinator\032\023wallet_common.proto"
  "\"\314\001\n\024WalletSigningRequest\022H\n\006header\030\001 \001("
  "\01328.mpc_engine.proto.wallet_coordinator."
  "WalletRequestHeader\022\016\n\006key_id\030\002 \001(\t\022\030\n\020t"
  "ransaction_data\030\003 \001(\t\022\021\n\tthreshold\030\004 \001(\r"
  "\022\024\n\014total_shards\030\005 \001(\r\022\027\n\017required_shard"
  "s\030\006 \003(\t\"\300\001\n\025WalletSigningResponse\022I\n\006hea"
  "der\030\001 \001(\01329.mpc_engine.proto.wallet_coor"
  "dinator.WalletResponseHeader\022\016\n\006key_id\030\002"
  " \001(\t\022\027\n\017final_signature\030\003 \001(\t\022\030\n\020shard_s"
  "ignatures\030\004 \003(\t\022\031\n\021successful_shards\030\005 \001"
  "(\rb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_wallet_5fsigning_2eproto_deps[1] = {
  &::descriptor_table_wallet_5fcommon_2eproto,
};
static ::_pbi::once_flag descriptor_table_wallet_5fsigning_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_wallet_5fsigning_2eproto = {
    false, false, 490, descriptor_table_protodef_wallet_5fsigning_2eproto,
    "wallet_signing.proto",
    &descriptor_table_wallet_5fsigning_2eproto_once, descriptor_table_wallet_5fsigning_2eproto_deps, 1, 2,
    schemas, file_default_instances, TableStruct_wallet_5fsigning_2eproto::offsets,
    file_level_metadata_wallet_5fsigning_2eproto, file_level_enum_descriptors_wallet_5fsigning_2eproto,
    file_level_service_descriptors_wallet_5fsigning_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_wallet_5fsigning_2eproto_getter() {
  return &descriptor_table_wallet_5fsigning_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_wallet_5fsigning_2eproto(&descriptor_table_wallet_5fsigning_2eproto);
namespace mpc_engine {
namespace proto {
namespace wallet_coordinator {

// ===================================================================

class WalletSigningRequest::_Internal {
 public:
  static const ::mpc_engine::proto::wallet_coordinator::WalletRequestHeader& header(const WalletSigningRequest* msg);
};

const ::mpc_engine::proto::wallet_coordinator::WalletRequestHeader&
WalletSigningRequest::_Internal::header(const WalletSigningRequest* msg) {
  return *msg->_impl_.header_;
}
void WalletSigningRequest::clear_header() {
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
}
WalletSigningRequest::WalletSigningRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mpc_engine.proto.wallet_coordinator.WalletSigningRequest)
}
WalletSigningRequest::WalletSigningRequest(const WalletSigningRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WalletSigningRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.required_shards_){from._impl_.required_shards_}
    , decltype(_impl_.key_id_){}
    , decltype(_impl_.transaction_data_){}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.threshold_){}
    , decltype(_impl_.total_shards_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key_id().empty()) {
    _this->_impl_.key_id_.Set(from._internal_key_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.transaction_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.transaction_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_transaction_data().empty()) {
    _this->_impl_.transaction_data_.Set(from._internal_transaction_data(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::mpc_engine::proto::wallet_coordinator::WalletRequestHeader(*from._impl_.header_);
  }
  ::memcpy(&_impl_.threshold_, &from._impl_.threshold_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.total_shards_) -
    reinterpret_cast<char*>(&_impl_.threshold_)) + sizeof(_impl_.total_shards_));
  // @@protoc_insertion_point(copy_constructor:mpc_engine.proto.wallet_coordinator.WalletSigningRequest)
}

inline void WalletSigningRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.required_shards_){arena}
    , decltype(_impl_.key_id_){}
    , decltype(_impl_.transaction_data_){}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.threshold_){0u}
    , decltype(_impl_.total_shards_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.transaction_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.transaction_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WalletSigningRequest::~WalletSigningRequest() {
  // @@protoc_insertion_point(destructor:mpc_engine.proto.wallet_coordinator.WalletSigningRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WalletSigningRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.required_shards_.~RepeatedPtrField();
  _impl_.key_id_.Destroy();
  _impl_.transaction_data_.Destroy();
  if (this != internal_default_instance()) delete _impl_.header_;
}

void WalletSigningRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WalletSigningRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mpc_engine.proto.wallet_coordinator.WalletSigningRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.required_shards_.Clear();
  _impl_.key_id_.ClearToEmpty();
  _impl_.transaction_data_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  ::memset(&_impl_.threshold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.total_shards_) -
      reinterpret_cast<char*>(&_impl_.threshold_)) + sizeof(_impl_.total_shards_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WalletSigningRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mpc_engine.proto.wallet_coordinator.WalletRequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string key_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_key_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mpc_engine.proto.wallet_coordinator.WalletSigningRequest.key_id"));
        } else
          goto handle_unusual;
        continue;
      // string transaction_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_transaction_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mpc_engine.proto.wallet_coordinator.WalletSigningRequest.transaction_data"));
        } else
          goto handle_unusual;
        continue;
      // uint32 threshold = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 total_shards = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.total_shards_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string required_shards = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_required_shards();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "mpc_engine.proto.wallet_coordinator.WalletSigningRequest.required_shards"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WalletSigningRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpc_engine.proto.wallet_coordinator.WalletSigningRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mpc_engine.proto.wallet_coordinator.WalletRequestHeader header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // string key_id = 2;
  if (!this->_internal_key_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key_id().data(), static_cast<int>(this->_internal_key_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mpc_engine.proto.wallet_coordinator.WalletSigningRequest.key_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key_id(), target);
  }

  // string transaction_data = 3;
  if (!this->_internal_transaction_data().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_transaction_data().data(), static_cast<int>(this->_internal_transaction_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mpc_engine.proto.wallet_coordinator.WalletSigningRequest.transaction_data");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_transaction_data(), target);
  }

  // uint32 threshold = 4;
  if (this->_internal_threshold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_threshold(), target);
  }

  // uint32 total_shards = 5;
  if (this->_internal_total_shards() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_total_shards(), target);
  }

  // repeated string required_shards = 6;
  for (int i = 0, n = this->_internal_required_shards_size(); i < n; i++) {
    const auto& s = this->_internal_required_shards(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mpc_engine.proto.wallet_coordinator.WalletSigningRequest.required_shards");
    target = stream->WriteString(6, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpc_engine.proto.wallet_coordinator.WalletSigningRequest)
  return target;
}

size_t WalletSigningRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mpc_engine.proto.wallet_coordinator.WalletSigningRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string required_shards = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.required_shards_.size());
  for (int i = 0, n = _impl_.required_shards_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.required_shards_.Get(i));
  }

  // string key_id = 2;
  if (!this->_internal_key_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key_id());
  }

  // string transaction_data = 3;
  if (!this->_internal_transaction_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_transaction_data());
  }

  // .mpc_engine.proto.wallet_coordinator.WalletRequestHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  // uint32 threshold = 4;
  if (this->_internal_threshold() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_threshold());
  }

  // uint32 total_shards = 5;
  if (this->_internal_total_shards() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_total_shards());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WalletSigningRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WalletSigningRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WalletSigningRequest::GetClassData() const { return &_class_data_; }


void WalletSigningRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WalletSigningRequest*>(&to_msg);
  auto& from = static_cast<const WalletSigningRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mpc_engine.proto.wallet_coordinator.WalletSigningRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.required_shards_.MergeFrom(from._impl_.required_shards_);
  if (!from._internal_key_id().empty()) {
    _this->_internal_set_key_id(from._internal_key_id());
  }
  if (!from._internal_transaction_data().empty()) {
    _this->_internal_set_transaction_data(from._internal_transaction_data());
  }
  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::mpc_engine::proto::wallet_coordinator::WalletRequestHeader::MergeFrom(
        from._internal_header());
  }
  if (from._internal_threshold() != 0) {
    _this->_internal_set_threshold(from._internal_threshold());
  }
  if (from._internal_total_shards() != 0) {
    _this->_internal_set_total_shards(from._internal_total_shards());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WalletSigningRequest::CopyFrom(const WalletSigningRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpc_engine.proto.wallet_coordinator.WalletSigningRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WalletSigningRequest::IsInitialized() const {
  return true;
}

void WalletSigningRequest::InternalSwap(WalletSigningRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.required_shards_.InternalSwap(&other->_impl_.required_shards_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_id_, lhs_arena,
      &other->_impl_.key_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.transaction_data_, lhs_arena,
      &other->_impl_.transaction_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WalletSigningRequest, _impl_.total_shards_)
      + sizeof(WalletSigningRequest::_impl_.total_shards_)
      - PROTOBUF_FIELD_OFFSET(WalletSigningRequest, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WalletSigningRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_wallet_5fsigning_2eproto_getter, &descriptor_table_wallet_5fsigning_2eproto_once,
      file_level_metadata_wallet_5fsigning_2eproto[0]);
}

// ===================================================================

class WalletSigningResponse::_Internal {
 public:
  static const ::mpc_engine::proto::wallet_coordinator::WalletResponseHeader& header(const WalletSigningResponse* msg);
};

const ::mpc_engine::proto::wallet_coordinator::WalletResponseHeader&
WalletSigningResponse::_Internal::header(const WalletSigningResponse* msg) {
  return *msg->_impl_.header_;
}
void WalletSigningResponse::clear_header() {
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
}
WalletSigningResponse::WalletSigningResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mpc_engine.proto.wallet_coordinator.WalletSigningResponse)
}
WalletSigningResponse::WalletSigningResponse(const WalletSigningResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WalletSigningResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.shard_signatures_){from._impl_.shard_signatures_}
    , decltype(_impl_.key_id_){}
    , decltype(_impl_.final_signature_){}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.successful_shards_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key_id().empty()) {
    _this->_impl_.key_id_.Set(from._internal_key_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.final_signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.final_signature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_final_signature().empty()) {
    _this->_impl_.final_signature_.Set(from._internal_final_signature(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::mpc_engine::proto::wallet_coordinator::WalletResponseHeader(*from._impl_.header_);
  }
  _this->_impl_.successful_shards_ = from._impl_.successful_shards_;
  // @@protoc_insertion_point(copy_constructor:mpc_engine.proto.wallet_coordinator.WalletSigningResponse)
}

inline void WalletSigningResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.shard_signatures_){arena}
    , decltype(_impl_.key_id_){}
    , decltype(_impl_.final_signature_){}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.successful_shards_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.final_signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.final_signature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WalletSigningResponse::~WalletSigningResponse() {
  // @@protoc_insertion_point(destructor:mpc_engine.proto.wallet_coordinator.WalletSigningResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WalletSigningResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.shard_signatures_.~RepeatedPtrField();
  _impl_.key_id_.Destroy();
  _impl_.final_signature_.Destroy();
  if (this != internal_default_instance()) delete _impl_.header_;
}

void WalletSigningResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WalletSigningResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mpc_engine.proto.wallet_coordinator.WalletSigningResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.shard_signatures_.Clear();
  _impl_.key_id_.ClearToEmpty();
  _impl_.final_signature_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  _impl_.successful_shards_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WalletSigningResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mpc_engine.proto.wallet_coordinator.WalletResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string key_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_key_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mpc_engine.proto.wallet_coordinator.WalletSigningResponse.key_id"));
        } else
          goto handle_unusual;
        continue;
      // string final_signature = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_final_signature();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mpc_engine.proto.wallet_coordinator.WalletSigningResponse.final_signature"));
        } else
          goto handle_unusual;
        continue;
      // repeated string shard_signatures = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_shard_signatures();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "mpc_engine.proto.wallet_coordinator.WalletSigningResponse.shard_signatures"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 successful_shards = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.successful_shards_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WalletSigningResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpc_engine.proto.wallet_coordinator.WalletSigningResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mpc_engine.proto.wallet_coordinator.WalletResponseHeader header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // string key_id = 2;
  if (!this->_internal_key_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key_id().data(), static_cast<int>(this->_internal_key_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mpc_engine.proto.wallet_coordinator.WalletSigningResponse.key_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key_id(), target);
  }

  // string final_signature = 3;
  if (!this->_internal_final_signature().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_final_signature().data(), static_cast<int>(this->_internal_final_signature().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mpc_engine.proto.wallet_coordinator.WalletSigningResponse.final_signature");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_final_signature(), target);
  }

  // repeated string shard_signatures = 4;
  for (int i = 0, n = this->_internal_shard_signatures_size(); i < n; i++) {
    const auto& s = this->_internal_shard_signatures(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mpc_engine.proto.wallet_coordinator.WalletSigningResponse.shard_signatures");
    target = stream->WriteString(4, s, target);
  }

  // uint32 successful_shards = 5;
  if (this->_internal_successful_shards() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_successful_shards(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpc_engine.proto.wallet_coordinator.WalletSigningResponse)
  return target;
}

size_t WalletSigningResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mpc_engine.proto.wallet_coordinator.WalletSigningResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string shard_signatures = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.shard_signatures_.size());
  for (int i = 0, n = _impl_.shard_signatures_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.shard_signatures_.Get(i));
  }

  // string key_id = 2;
  if (!this->_internal_key_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key_id());
  }

  // string final_signature = 3;
  if (!this->_internal_final_signature().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_final_signature());
  }

  // .mpc_engine.proto.wallet_coordinator.WalletResponseHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  // uint32 successful_shards = 5;
  if (this->_internal_successful_shards() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_successful_shards());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WalletSigningResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WalletSigningResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WalletSigningResponse::GetClassData() const { return &_class_data_; }


void WalletSigningResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WalletSigningResponse*>(&to_msg);
  auto& from = static_cast<const WalletSigningResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mpc_engine.proto.wallet_coordinator.WalletSigningResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.shard_signatures_.MergeFrom(from._impl_.shard_signatures_);
  if (!from._internal_key_id().empty()) {
    _this->_internal_set_key_id(from._internal_key_id());
  }
  if (!from._internal_final_signature().empty()) {
    _this->_internal_set_final_signature(from._internal_final_signature());
  }
  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::mpc_engine::proto::wallet_coordinator::WalletResponseHeader::MergeFrom(
        from._internal_header());
  }
  if (from._internal_successful_shards() != 0) {
    _this->_internal_set_successful_shards(from._internal_successful_shards());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WalletSigningResponse::CopyFrom(const WalletSigningResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpc_engine.proto.wallet_coordinator.WalletSigningResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WalletSigningResponse::IsInitialized() const {
  return true;
}

void WalletSigningResponse::InternalSwap(WalletSigningResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.shard_signatures_.InternalSwap(&other->_impl_.shard_signatures_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_id_, lhs_arena,
      &other->_impl_.key_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.final_signature_, lhs_arena,
      &other->_impl_.final_signature_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WalletSigningResponse, _impl_.successful_shards_)
      + sizeof(WalletSigningResponse::_impl_.successful_shards_)
      - PROTOBUF_FIELD_OFFSET(WalletSigningResponse, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WalletSigningResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_wallet_5fsigning_2eproto_getter, &descriptor_table_wallet_5fsigning_2eproto_once,
      file_level_metadata_wallet_5fsigning_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace wallet_coordinator
}  // namespace proto
}  // namespace mpc_engine
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mpc_engine::proto::wallet_coordinator::WalletSigningRequest*
Arena::CreateMaybeMessage< ::mpc_engine::proto::wallet_coordinator::WalletSigningRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mpc_engine::proto::wallet_coordinator::WalletSigningRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mpc_engine::proto::wallet_coordinator::WalletSigningResponse*
Arena::CreateMaybeMessage< ::mpc_engine::proto::wallet_coordinator::WalletSigningResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mpc_engine::proto::wallet_coordinator::WalletSigningResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
