// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace mpc_engine {
namespace proto {
namespace coordinator_node {
PROTOBUF_CONSTEXPR CoordinatorNodeMessage::CoordinatorNodeMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_type_)*/0
  , /*decltype(_impl_.payload_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct CoordinatorNodeMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CoordinatorNodeMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CoordinatorNodeMessageDefaultTypeInternal() {}
  union {
    CoordinatorNodeMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CoordinatorNodeMessageDefaultTypeInternal _CoordinatorNodeMessage_default_instance_;
}  // namespace coordinator_node
}  // namespace proto
}  // namespace mpc_engine
static ::_pb::Metadata file_level_metadata_message_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_message_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_message_2eproto = nullptr;

const uint32_t TableStruct_message_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mpc_engine::proto::coordinator_node::CoordinatorNodeMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::mpc_engine::proto::coordinator_node::CoordinatorNodeMessage, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mpc_engine::proto::coordinator_node::CoordinatorNodeMessage, _impl_.message_type_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::mpc_engine::proto::coordinator_node::CoordinatorNodeMessage, _impl_.payload_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::mpc_engine::proto::coordinator_node::CoordinatorNodeMessage)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::mpc_engine::proto::coordinator_node::_CoordinatorNodeMessage_default_instance_._instance,
};

const char descriptor_table_protodef_message_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rmessage.proto\022!mpc_engine.proto.coordi"
  "nator_node\032\014common.proto\032\rsigning.proto\""
  "\327\001\n\026CoordinatorNodeMessage\022\024\n\014message_ty"
  "pe\030\001 \001(\005\022L\n\017signing_request\030\002 \001(\01321.mpc_"
  "engine.proto.coordinator_node.SigningReq"
  "uestH\000\022N\n\020signing_response\030\003 \001(\01322.mpc_e"
  "ngine.proto.coordinator_node.SigningResp"
  "onseH\000B\t\n\007payloadb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_message_2eproto_deps[2] = {
  &::descriptor_table_common_2eproto,
  &::descriptor_table_signing_2eproto,
};
static ::_pbi::once_flag descriptor_table_message_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_message_2eproto = {
    false, false, 305, descriptor_table_protodef_message_2eproto,
    "message.proto",
    &descriptor_table_message_2eproto_once, descriptor_table_message_2eproto_deps, 2, 1,
    schemas, file_default_instances, TableStruct_message_2eproto::offsets,
    file_level_metadata_message_2eproto, file_level_enum_descriptors_message_2eproto,
    file_level_service_descriptors_message_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_message_2eproto_getter() {
  return &descriptor_table_message_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_message_2eproto(&descriptor_table_message_2eproto);
namespace mpc_engine {
namespace proto {
namespace coordinator_node {

// ===================================================================

class CoordinatorNodeMessage::_Internal {
 public:
  static const ::mpc_engine::proto::coordinator_node::SigningRequest& signing_request(const CoordinatorNodeMessage* msg);
  static const ::mpc_engine::proto::coordinator_node::SigningResponse& signing_response(const CoordinatorNodeMessage* msg);
};

const ::mpc_engine::proto::coordinator_node::SigningRequest&
CoordinatorNodeMessage::_Internal::signing_request(const CoordinatorNodeMessage* msg) {
  return *msg->_impl_.payload_.signing_request_;
}
const ::mpc_engine::proto::coordinator_node::SigningResponse&
CoordinatorNodeMessage::_Internal::signing_response(const CoordinatorNodeMessage* msg) {
  return *msg->_impl_.payload_.signing_response_;
}
void CoordinatorNodeMessage::set_allocated_signing_request(::mpc_engine::proto::coordinator_node::SigningRequest* signing_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (signing_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(signing_request));
    if (message_arena != submessage_arena) {
      signing_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signing_request, submessage_arena);
    }
    set_has_signing_request();
    _impl_.payload_.signing_request_ = signing_request;
  }
  // @@protoc_insertion_point(field_set_allocated:mpc_engine.proto.coordinator_node.CoordinatorNodeMessage.signing_request)
}
void CoordinatorNodeMessage::clear_signing_request() {
  if (_internal_has_signing_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.signing_request_;
    }
    clear_has_payload();
  }
}
void CoordinatorNodeMessage::set_allocated_signing_response(::mpc_engine::proto::coordinator_node::SigningResponse* signing_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (signing_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(signing_response));
    if (message_arena != submessage_arena) {
      signing_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signing_response, submessage_arena);
    }
    set_has_signing_response();
    _impl_.payload_.signing_response_ = signing_response;
  }
  // @@protoc_insertion_point(field_set_allocated:mpc_engine.proto.coordinator_node.CoordinatorNodeMessage.signing_response)
}
void CoordinatorNodeMessage::clear_signing_response() {
  if (_internal_has_signing_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.signing_response_;
    }
    clear_has_payload();
  }
}
CoordinatorNodeMessage::CoordinatorNodeMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mpc_engine.proto.coordinator_node.CoordinatorNodeMessage)
}
CoordinatorNodeMessage::CoordinatorNodeMessage(const CoordinatorNodeMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CoordinatorNodeMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_type_){}
    , decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.message_type_ = from._impl_.message_type_;
  clear_has_payload();
  switch (from.payload_case()) {
    case kSigningRequest: {
      _this->_internal_mutable_signing_request()->::mpc_engine::proto::coordinator_node::SigningRequest::MergeFrom(
          from._internal_signing_request());
      break;
    }
    case kSigningResponse: {
      _this->_internal_mutable_signing_response()->::mpc_engine::proto::coordinator_node::SigningResponse::MergeFrom(
          from._internal_signing_response());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:mpc_engine.proto.coordinator_node.CoordinatorNodeMessage)
}

inline void CoordinatorNodeMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_type_){0}
    , decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_payload();
}

CoordinatorNodeMessage::~CoordinatorNodeMessage() {
  // @@protoc_insertion_point(destructor:mpc_engine.proto.coordinator_node.CoordinatorNodeMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CoordinatorNodeMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_payload()) {
    clear_payload();
  }
}

void CoordinatorNodeMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CoordinatorNodeMessage::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:mpc_engine.proto.coordinator_node.CoordinatorNodeMessage)
  switch (payload_case()) {
    case kSigningRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.signing_request_;
      }
      break;
    }
    case kSigningResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.signing_response_;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}


void CoordinatorNodeMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:mpc_engine.proto.coordinator_node.CoordinatorNodeMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_type_ = 0;
  clear_payload();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CoordinatorNodeMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 message_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.message_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .mpc_engine.proto.coordinator_node.SigningRequest signing_request = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_signing_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .mpc_engine.proto.coordinator_node.SigningResponse signing_response = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_signing_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CoordinatorNodeMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpc_engine.proto.coordinator_node.CoordinatorNodeMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 message_type = 1;
  if (this->_internal_message_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_message_type(), target);
  }

  // .mpc_engine.proto.coordinator_node.SigningRequest signing_request = 2;
  if (_internal_has_signing_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::signing_request(this),
        _Internal::signing_request(this).GetCachedSize(), target, stream);
  }

  // .mpc_engine.proto.coordinator_node.SigningResponse signing_response = 3;
  if (_internal_has_signing_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::signing_response(this),
        _Internal::signing_response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpc_engine.proto.coordinator_node.CoordinatorNodeMessage)
  return target;
}

size_t CoordinatorNodeMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mpc_engine.proto.coordinator_node.CoordinatorNodeMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 message_type = 1;
  if (this->_internal_message_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_message_type());
  }

  switch (payload_case()) {
    // .mpc_engine.proto.coordinator_node.SigningRequest signing_request = 2;
    case kSigningRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.signing_request_);
      break;
    }
    // .mpc_engine.proto.coordinator_node.SigningResponse signing_response = 3;
    case kSigningResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.signing_response_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CoordinatorNodeMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CoordinatorNodeMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CoordinatorNodeMessage::GetClassData() const { return &_class_data_; }


void CoordinatorNodeMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CoordinatorNodeMessage*>(&to_msg);
  auto& from = static_cast<const CoordinatorNodeMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mpc_engine.proto.coordinator_node.CoordinatorNodeMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_message_type() != 0) {
    _this->_internal_set_message_type(from._internal_message_type());
  }
  switch (from.payload_case()) {
    case kSigningRequest: {
      _this->_internal_mutable_signing_request()->::mpc_engine::proto::coordinator_node::SigningRequest::MergeFrom(
          from._internal_signing_request());
      break;
    }
    case kSigningResponse: {
      _this->_internal_mutable_signing_response()->::mpc_engine::proto::coordinator_node::SigningResponse::MergeFrom(
          from._internal_signing_response());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CoordinatorNodeMessage::CopyFrom(const CoordinatorNodeMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mpc_engine.proto.coordinator_node.CoordinatorNodeMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoordinatorNodeMessage::IsInitialized() const {
  return true;
}

void CoordinatorNodeMessage::InternalSwap(CoordinatorNodeMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.message_type_, other->_impl_.message_type_);
  swap(_impl_.payload_, other->_impl_.payload_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CoordinatorNodeMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace coordinator_node
}  // namespace proto
}  // namespace mpc_engine
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mpc_engine::proto::coordinator_node::CoordinatorNodeMessage*
Arena::CreateMaybeMessage< ::mpc_engine::proto::coordinator_node::CoordinatorNodeMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mpc_engine::proto::coordinator_node::CoordinatorNodeMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
