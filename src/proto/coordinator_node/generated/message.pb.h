// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "signing.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto;
namespace mpc_engine {
namespace proto {
namespace coordinator_node {
class CoordinatorNodeMessage;
struct CoordinatorNodeMessageDefaultTypeInternal;
extern CoordinatorNodeMessageDefaultTypeInternal _CoordinatorNodeMessage_default_instance_;
}  // namespace coordinator_node
}  // namespace proto
}  // namespace mpc_engine
PROTOBUF_NAMESPACE_OPEN
template<> ::mpc_engine::proto::coordinator_node::CoordinatorNodeMessage* Arena::CreateMaybeMessage<::mpc_engine::proto::coordinator_node::CoordinatorNodeMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mpc_engine {
namespace proto {
namespace coordinator_node {

// ===================================================================

class CoordinatorNodeMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mpc_engine.proto.coordinator_node.CoordinatorNodeMessage) */ {
 public:
  inline CoordinatorNodeMessage() : CoordinatorNodeMessage(nullptr) {}
  ~CoordinatorNodeMessage() override;
  explicit PROTOBUF_CONSTEXPR CoordinatorNodeMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CoordinatorNodeMessage(const CoordinatorNodeMessage& from);
  CoordinatorNodeMessage(CoordinatorNodeMessage&& from) noexcept
    : CoordinatorNodeMessage() {
    *this = ::std::move(from);
  }

  inline CoordinatorNodeMessage& operator=(const CoordinatorNodeMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CoordinatorNodeMessage& operator=(CoordinatorNodeMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CoordinatorNodeMessage& default_instance() {
    return *internal_default_instance();
  }
  enum PayloadCase {
    kSigningRequest = 2,
    kSigningResponse = 3,
    PAYLOAD_NOT_SET = 0,
  };

  static inline const CoordinatorNodeMessage* internal_default_instance() {
    return reinterpret_cast<const CoordinatorNodeMessage*>(
               &_CoordinatorNodeMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CoordinatorNodeMessage& a, CoordinatorNodeMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(CoordinatorNodeMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CoordinatorNodeMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CoordinatorNodeMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CoordinatorNodeMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CoordinatorNodeMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CoordinatorNodeMessage& from) {
    CoordinatorNodeMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CoordinatorNodeMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mpc_engine.proto.coordinator_node.CoordinatorNodeMessage";
  }
  protected:
  explicit CoordinatorNodeMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageTypeFieldNumber = 1,
    kSigningRequestFieldNumber = 2,
    kSigningResponseFieldNumber = 3,
  };
  // int32 message_type = 1;
  void clear_message_type();
  int32_t message_type() const;
  void set_message_type(int32_t value);
  private:
  int32_t _internal_message_type() const;
  void _internal_set_message_type(int32_t value);
  public:

  // .mpc_engine.proto.coordinator_node.SigningRequest signing_request = 2;
  bool has_signing_request() const;
  private:
  bool _internal_has_signing_request() const;
  public:
  void clear_signing_request();
  const ::mpc_engine::proto::coordinator_node::SigningRequest& signing_request() const;
  PROTOBUF_NODISCARD ::mpc_engine::proto::coordinator_node::SigningRequest* release_signing_request();
  ::mpc_engine::proto::coordinator_node::SigningRequest* mutable_signing_request();
  void set_allocated_signing_request(::mpc_engine::proto::coordinator_node::SigningRequest* signing_request);
  private:
  const ::mpc_engine::proto::coordinator_node::SigningRequest& _internal_signing_request() const;
  ::mpc_engine::proto::coordinator_node::SigningRequest* _internal_mutable_signing_request();
  public:
  void unsafe_arena_set_allocated_signing_request(
      ::mpc_engine::proto::coordinator_node::SigningRequest* signing_request);
  ::mpc_engine::proto::coordinator_node::SigningRequest* unsafe_arena_release_signing_request();

  // .mpc_engine.proto.coordinator_node.SigningResponse signing_response = 3;
  bool has_signing_response() const;
  private:
  bool _internal_has_signing_response() const;
  public:
  void clear_signing_response();
  const ::mpc_engine::proto::coordinator_node::SigningResponse& signing_response() const;
  PROTOBUF_NODISCARD ::mpc_engine::proto::coordinator_node::SigningResponse* release_signing_response();
  ::mpc_engine::proto::coordinator_node::SigningResponse* mutable_signing_response();
  void set_allocated_signing_response(::mpc_engine::proto::coordinator_node::SigningResponse* signing_response);
  private:
  const ::mpc_engine::proto::coordinator_node::SigningResponse& _internal_signing_response() const;
  ::mpc_engine::proto::coordinator_node::SigningResponse* _internal_mutable_signing_response();
  public:
  void unsafe_arena_set_allocated_signing_response(
      ::mpc_engine::proto::coordinator_node::SigningResponse* signing_response);
  ::mpc_engine::proto::coordinator_node::SigningResponse* unsafe_arena_release_signing_response();

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:mpc_engine.proto.coordinator_node.CoordinatorNodeMessage)
 private:
  class _Internal;
  void set_has_signing_request();
  void set_has_signing_response();

  inline bool has_payload() const;
  inline void clear_has_payload();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t message_type_;
    union PayloadUnion {
      constexpr PayloadUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::mpc_engine::proto::coordinator_node::SigningRequest* signing_request_;
      ::mpc_engine::proto::coordinator_node::SigningResponse* signing_response_;
    } payload_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CoordinatorNodeMessage

// int32 message_type = 1;
inline void CoordinatorNodeMessage::clear_message_type() {
  _impl_.message_type_ = 0;
}
inline int32_t CoordinatorNodeMessage::_internal_message_type() const {
  return _impl_.message_type_;
}
inline int32_t CoordinatorNodeMessage::message_type() const {
  // @@protoc_insertion_point(field_get:mpc_engine.proto.coordinator_node.CoordinatorNodeMessage.message_type)
  return _internal_message_type();
}
inline void CoordinatorNodeMessage::_internal_set_message_type(int32_t value) {
  
  _impl_.message_type_ = value;
}
inline void CoordinatorNodeMessage::set_message_type(int32_t value) {
  _internal_set_message_type(value);
  // @@protoc_insertion_point(field_set:mpc_engine.proto.coordinator_node.CoordinatorNodeMessage.message_type)
}

// .mpc_engine.proto.coordinator_node.SigningRequest signing_request = 2;
inline bool CoordinatorNodeMessage::_internal_has_signing_request() const {
  return payload_case() == kSigningRequest;
}
inline bool CoordinatorNodeMessage::has_signing_request() const {
  return _internal_has_signing_request();
}
inline void CoordinatorNodeMessage::set_has_signing_request() {
  _impl_._oneof_case_[0] = kSigningRequest;
}
inline ::mpc_engine::proto::coordinator_node::SigningRequest* CoordinatorNodeMessage::release_signing_request() {
  // @@protoc_insertion_point(field_release:mpc_engine.proto.coordinator_node.CoordinatorNodeMessage.signing_request)
  if (_internal_has_signing_request()) {
    clear_has_payload();
    ::mpc_engine::proto::coordinator_node::SigningRequest* temp = _impl_.payload_.signing_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.signing_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::mpc_engine::proto::coordinator_node::SigningRequest& CoordinatorNodeMessage::_internal_signing_request() const {
  return _internal_has_signing_request()
      ? *_impl_.payload_.signing_request_
      : reinterpret_cast< ::mpc_engine::proto::coordinator_node::SigningRequest&>(::mpc_engine::proto::coordinator_node::_SigningRequest_default_instance_);
}
inline const ::mpc_engine::proto::coordinator_node::SigningRequest& CoordinatorNodeMessage::signing_request() const {
  // @@protoc_insertion_point(field_get:mpc_engine.proto.coordinator_node.CoordinatorNodeMessage.signing_request)
  return _internal_signing_request();
}
inline ::mpc_engine::proto::coordinator_node::SigningRequest* CoordinatorNodeMessage::unsafe_arena_release_signing_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mpc_engine.proto.coordinator_node.CoordinatorNodeMessage.signing_request)
  if (_internal_has_signing_request()) {
    clear_has_payload();
    ::mpc_engine::proto::coordinator_node::SigningRequest* temp = _impl_.payload_.signing_request_;
    _impl_.payload_.signing_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CoordinatorNodeMessage::unsafe_arena_set_allocated_signing_request(::mpc_engine::proto::coordinator_node::SigningRequest* signing_request) {
  clear_payload();
  if (signing_request) {
    set_has_signing_request();
    _impl_.payload_.signing_request_ = signing_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mpc_engine.proto.coordinator_node.CoordinatorNodeMessage.signing_request)
}
inline ::mpc_engine::proto::coordinator_node::SigningRequest* CoordinatorNodeMessage::_internal_mutable_signing_request() {
  if (!_internal_has_signing_request()) {
    clear_payload();
    set_has_signing_request();
    _impl_.payload_.signing_request_ = CreateMaybeMessage< ::mpc_engine::proto::coordinator_node::SigningRequest >(GetArenaForAllocation());
  }
  return _impl_.payload_.signing_request_;
}
inline ::mpc_engine::proto::coordinator_node::SigningRequest* CoordinatorNodeMessage::mutable_signing_request() {
  ::mpc_engine::proto::coordinator_node::SigningRequest* _msg = _internal_mutable_signing_request();
  // @@protoc_insertion_point(field_mutable:mpc_engine.proto.coordinator_node.CoordinatorNodeMessage.signing_request)
  return _msg;
}

// .mpc_engine.proto.coordinator_node.SigningResponse signing_response = 3;
inline bool CoordinatorNodeMessage::_internal_has_signing_response() const {
  return payload_case() == kSigningResponse;
}
inline bool CoordinatorNodeMessage::has_signing_response() const {
  return _internal_has_signing_response();
}
inline void CoordinatorNodeMessage::set_has_signing_response() {
  _impl_._oneof_case_[0] = kSigningResponse;
}
inline ::mpc_engine::proto::coordinator_node::SigningResponse* CoordinatorNodeMessage::release_signing_response() {
  // @@protoc_insertion_point(field_release:mpc_engine.proto.coordinator_node.CoordinatorNodeMessage.signing_response)
  if (_internal_has_signing_response()) {
    clear_has_payload();
    ::mpc_engine::proto::coordinator_node::SigningResponse* temp = _impl_.payload_.signing_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.signing_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::mpc_engine::proto::coordinator_node::SigningResponse& CoordinatorNodeMessage::_internal_signing_response() const {
  return _internal_has_signing_response()
      ? *_impl_.payload_.signing_response_
      : reinterpret_cast< ::mpc_engine::proto::coordinator_node::SigningResponse&>(::mpc_engine::proto::coordinator_node::_SigningResponse_default_instance_);
}
inline const ::mpc_engine::proto::coordinator_node::SigningResponse& CoordinatorNodeMessage::signing_response() const {
  // @@protoc_insertion_point(field_get:mpc_engine.proto.coordinator_node.CoordinatorNodeMessage.signing_response)
  return _internal_signing_response();
}
inline ::mpc_engine::proto::coordinator_node::SigningResponse* CoordinatorNodeMessage::unsafe_arena_release_signing_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mpc_engine.proto.coordinator_node.CoordinatorNodeMessage.signing_response)
  if (_internal_has_signing_response()) {
    clear_has_payload();
    ::mpc_engine::proto::coordinator_node::SigningResponse* temp = _impl_.payload_.signing_response_;
    _impl_.payload_.signing_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CoordinatorNodeMessage::unsafe_arena_set_allocated_signing_response(::mpc_engine::proto::coordinator_node::SigningResponse* signing_response) {
  clear_payload();
  if (signing_response) {
    set_has_signing_response();
    _impl_.payload_.signing_response_ = signing_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mpc_engine.proto.coordinator_node.CoordinatorNodeMessage.signing_response)
}
inline ::mpc_engine::proto::coordinator_node::SigningResponse* CoordinatorNodeMessage::_internal_mutable_signing_response() {
  if (!_internal_has_signing_response()) {
    clear_payload();
    set_has_signing_response();
    _impl_.payload_.signing_response_ = CreateMaybeMessage< ::mpc_engine::proto::coordinator_node::SigningResponse >(GetArenaForAllocation());
  }
  return _impl_.payload_.signing_response_;
}
inline ::mpc_engine::proto::coordinator_node::SigningResponse* CoordinatorNodeMessage::mutable_signing_response() {
  ::mpc_engine::proto::coordinator_node::SigningResponse* _msg = _internal_mutable_signing_response();
  // @@protoc_insertion_point(field_mutable:mpc_engine.proto.coordinator_node.CoordinatorNodeMessage.signing_response)
  return _msg;
}

inline bool CoordinatorNodeMessage::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void CoordinatorNodeMessage::clear_has_payload() {
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline CoordinatorNodeMessage::PayloadCase CoordinatorNodeMessage::payload_case() const {
  return CoordinatorNodeMessage::PayloadCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace coordinator_node
}  // namespace proto
}  // namespace mpc_engine

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_2eproto
