// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: signing.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_signing_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_signing_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_signing_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_signing_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_signing_2eproto;
namespace mpc_engine {
namespace proto {
namespace coordinator_node {
class SigningRequest;
struct SigningRequestDefaultTypeInternal;
extern SigningRequestDefaultTypeInternal _SigningRequest_default_instance_;
class SigningResponse;
struct SigningResponseDefaultTypeInternal;
extern SigningResponseDefaultTypeInternal _SigningResponse_default_instance_;
}  // namespace coordinator_node
}  // namespace proto
}  // namespace mpc_engine
PROTOBUF_NAMESPACE_OPEN
template<> ::mpc_engine::proto::coordinator_node::SigningRequest* Arena::CreateMaybeMessage<::mpc_engine::proto::coordinator_node::SigningRequest>(Arena*);
template<> ::mpc_engine::proto::coordinator_node::SigningResponse* Arena::CreateMaybeMessage<::mpc_engine::proto::coordinator_node::SigningResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mpc_engine {
namespace proto {
namespace coordinator_node {

// ===================================================================

class SigningRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mpc_engine.proto.coordinator_node.SigningRequest) */ {
 public:
  inline SigningRequest() : SigningRequest(nullptr) {}
  ~SigningRequest() override;
  explicit PROTOBUF_CONSTEXPR SigningRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SigningRequest(const SigningRequest& from);
  SigningRequest(SigningRequest&& from) noexcept
    : SigningRequest() {
    *this = ::std::move(from);
  }

  inline SigningRequest& operator=(const SigningRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigningRequest& operator=(SigningRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SigningRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SigningRequest* internal_default_instance() {
    return reinterpret_cast<const SigningRequest*>(
               &_SigningRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SigningRequest& a, SigningRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SigningRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigningRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SigningRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SigningRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SigningRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SigningRequest& from) {
    SigningRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mpc_engine.proto.coordinator_node.SigningRequest";
  }
  protected:
  explicit SigningRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyIdFieldNumber = 2,
    kTransactionDataFieldNumber = 3,
    kHeaderFieldNumber = 1,
    kThresholdFieldNumber = 4,
    kTotalShardsFieldNumber = 5,
  };
  // string key_id = 2;
  void clear_key_id();
  const std::string& key_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key_id();
  PROTOBUF_NODISCARD std::string* release_key_id();
  void set_allocated_key_id(std::string* key_id);
  private:
  const std::string& _internal_key_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key_id(const std::string& value);
  std::string* _internal_mutable_key_id();
  public:

  // string transaction_data = 3;
  void clear_transaction_data();
  const std::string& transaction_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_transaction_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_transaction_data();
  PROTOBUF_NODISCARD std::string* release_transaction_data();
  void set_allocated_transaction_data(std::string* transaction_data);
  private:
  const std::string& _internal_transaction_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transaction_data(const std::string& value);
  std::string* _internal_mutable_transaction_data();
  public:

  // .mpc_engine.proto.coordinator_node.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::mpc_engine::proto::coordinator_node::RequestHeader& header() const;
  PROTOBUF_NODISCARD ::mpc_engine::proto::coordinator_node::RequestHeader* release_header();
  ::mpc_engine::proto::coordinator_node::RequestHeader* mutable_header();
  void set_allocated_header(::mpc_engine::proto::coordinator_node::RequestHeader* header);
  private:
  const ::mpc_engine::proto::coordinator_node::RequestHeader& _internal_header() const;
  ::mpc_engine::proto::coordinator_node::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::mpc_engine::proto::coordinator_node::RequestHeader* header);
  ::mpc_engine::proto::coordinator_node::RequestHeader* unsafe_arena_release_header();

  // uint32 threshold = 4;
  void clear_threshold();
  uint32_t threshold() const;
  void set_threshold(uint32_t value);
  private:
  uint32_t _internal_threshold() const;
  void _internal_set_threshold(uint32_t value);
  public:

  // uint32 total_shards = 5;
  void clear_total_shards();
  uint32_t total_shards() const;
  void set_total_shards(uint32_t value);
  private:
  uint32_t _internal_total_shards() const;
  void _internal_set_total_shards(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mpc_engine.proto.coordinator_node.SigningRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transaction_data_;
    ::mpc_engine::proto::coordinator_node::RequestHeader* header_;
    uint32_t threshold_;
    uint32_t total_shards_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_signing_2eproto;
};
// -------------------------------------------------------------------

class SigningResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mpc_engine.proto.coordinator_node.SigningResponse) */ {
 public:
  inline SigningResponse() : SigningResponse(nullptr) {}
  ~SigningResponse() override;
  explicit PROTOBUF_CONSTEXPR SigningResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SigningResponse(const SigningResponse& from);
  SigningResponse(SigningResponse&& from) noexcept
    : SigningResponse() {
    *this = ::std::move(from);
  }

  inline SigningResponse& operator=(const SigningResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigningResponse& operator=(SigningResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SigningResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SigningResponse* internal_default_instance() {
    return reinterpret_cast<const SigningResponse*>(
               &_SigningResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SigningResponse& a, SigningResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SigningResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigningResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SigningResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SigningResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SigningResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SigningResponse& from) {
    SigningResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mpc_engine.proto.coordinator_node.SigningResponse";
  }
  protected:
  explicit SigningResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyIdFieldNumber = 2,
    kSignatureFieldNumber = 3,
    kHeaderFieldNumber = 1,
    kShardIndexFieldNumber = 4,
  };
  // string key_id = 2;
  void clear_key_id();
  const std::string& key_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key_id();
  PROTOBUF_NODISCARD std::string* release_key_id();
  void set_allocated_key_id(std::string* key_id);
  private:
  const std::string& _internal_key_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key_id(const std::string& value);
  std::string* _internal_mutable_key_id();
  public:

  // string signature = 3;
  void clear_signature();
  const std::string& signature() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signature(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signature();
  PROTOBUF_NODISCARD std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // .mpc_engine.proto.coordinator_node.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::mpc_engine::proto::coordinator_node::ResponseHeader& header() const;
  PROTOBUF_NODISCARD ::mpc_engine::proto::coordinator_node::ResponseHeader* release_header();
  ::mpc_engine::proto::coordinator_node::ResponseHeader* mutable_header();
  void set_allocated_header(::mpc_engine::proto::coordinator_node::ResponseHeader* header);
  private:
  const ::mpc_engine::proto::coordinator_node::ResponseHeader& _internal_header() const;
  ::mpc_engine::proto::coordinator_node::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::mpc_engine::proto::coordinator_node::ResponseHeader* header);
  ::mpc_engine::proto::coordinator_node::ResponseHeader* unsafe_arena_release_header();

  // uint32 shard_index = 4;
  void clear_shard_index();
  uint32_t shard_index() const;
  void set_shard_index(uint32_t value);
  private:
  uint32_t _internal_shard_index() const;
  void _internal_set_shard_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mpc_engine.proto.coordinator_node.SigningResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
    ::mpc_engine::proto::coordinator_node::ResponseHeader* header_;
    uint32_t shard_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_signing_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SigningRequest

// .mpc_engine.proto.coordinator_node.RequestHeader header = 1;
inline bool SigningRequest::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool SigningRequest::has_header() const {
  return _internal_has_header();
}
inline const ::mpc_engine::proto::coordinator_node::RequestHeader& SigningRequest::_internal_header() const {
  const ::mpc_engine::proto::coordinator_node::RequestHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::mpc_engine::proto::coordinator_node::RequestHeader&>(
      ::mpc_engine::proto::coordinator_node::_RequestHeader_default_instance_);
}
inline const ::mpc_engine::proto::coordinator_node::RequestHeader& SigningRequest::header() const {
  // @@protoc_insertion_point(field_get:mpc_engine.proto.coordinator_node.SigningRequest.header)
  return _internal_header();
}
inline void SigningRequest::unsafe_arena_set_allocated_header(
    ::mpc_engine::proto::coordinator_node::RequestHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mpc_engine.proto.coordinator_node.SigningRequest.header)
}
inline ::mpc_engine::proto::coordinator_node::RequestHeader* SigningRequest::release_header() {
  
  ::mpc_engine::proto::coordinator_node::RequestHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mpc_engine::proto::coordinator_node::RequestHeader* SigningRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:mpc_engine.proto.coordinator_node.SigningRequest.header)
  
  ::mpc_engine::proto::coordinator_node::RequestHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::mpc_engine::proto::coordinator_node::RequestHeader* SigningRequest::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::mpc_engine::proto::coordinator_node::RequestHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::mpc_engine::proto::coordinator_node::RequestHeader* SigningRequest::mutable_header() {
  ::mpc_engine::proto::coordinator_node::RequestHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:mpc_engine.proto.coordinator_node.SigningRequest.header)
  return _msg;
}
inline void SigningRequest::set_allocated_header(::mpc_engine::proto::coordinator_node::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:mpc_engine.proto.coordinator_node.SigningRequest.header)
}

// string key_id = 2;
inline void SigningRequest::clear_key_id() {
  _impl_.key_id_.ClearToEmpty();
}
inline const std::string& SigningRequest::key_id() const {
  // @@protoc_insertion_point(field_get:mpc_engine.proto.coordinator_node.SigningRequest.key_id)
  return _internal_key_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningRequest::set_key_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mpc_engine.proto.coordinator_node.SigningRequest.key_id)
}
inline std::string* SigningRequest::mutable_key_id() {
  std::string* _s = _internal_mutable_key_id();
  // @@protoc_insertion_point(field_mutable:mpc_engine.proto.coordinator_node.SigningRequest.key_id)
  return _s;
}
inline const std::string& SigningRequest::_internal_key_id() const {
  return _impl_.key_id_.Get();
}
inline void SigningRequest::_internal_set_key_id(const std::string& value) {
  
  _impl_.key_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SigningRequest::_internal_mutable_key_id() {
  
  return _impl_.key_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SigningRequest::release_key_id() {
  // @@protoc_insertion_point(field_release:mpc_engine.proto.coordinator_node.SigningRequest.key_id)
  return _impl_.key_id_.Release();
}
inline void SigningRequest::set_allocated_key_id(std::string* key_id) {
  if (key_id != nullptr) {
    
  } else {
    
  }
  _impl_.key_id_.SetAllocated(key_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_id_.IsDefault()) {
    _impl_.key_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mpc_engine.proto.coordinator_node.SigningRequest.key_id)
}

// string transaction_data = 3;
inline void SigningRequest::clear_transaction_data() {
  _impl_.transaction_data_.ClearToEmpty();
}
inline const std::string& SigningRequest::transaction_data() const {
  // @@protoc_insertion_point(field_get:mpc_engine.proto.coordinator_node.SigningRequest.transaction_data)
  return _internal_transaction_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningRequest::set_transaction_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.transaction_data_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mpc_engine.proto.coordinator_node.SigningRequest.transaction_data)
}
inline std::string* SigningRequest::mutable_transaction_data() {
  std::string* _s = _internal_mutable_transaction_data();
  // @@protoc_insertion_point(field_mutable:mpc_engine.proto.coordinator_node.SigningRequest.transaction_data)
  return _s;
}
inline const std::string& SigningRequest::_internal_transaction_data() const {
  return _impl_.transaction_data_.Get();
}
inline void SigningRequest::_internal_set_transaction_data(const std::string& value) {
  
  _impl_.transaction_data_.Set(value, GetArenaForAllocation());
}
inline std::string* SigningRequest::_internal_mutable_transaction_data() {
  
  return _impl_.transaction_data_.Mutable(GetArenaForAllocation());
}
inline std::string* SigningRequest::release_transaction_data() {
  // @@protoc_insertion_point(field_release:mpc_engine.proto.coordinator_node.SigningRequest.transaction_data)
  return _impl_.transaction_data_.Release();
}
inline void SigningRequest::set_allocated_transaction_data(std::string* transaction_data) {
  if (transaction_data != nullptr) {
    
  } else {
    
  }
  _impl_.transaction_data_.SetAllocated(transaction_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.transaction_data_.IsDefault()) {
    _impl_.transaction_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mpc_engine.proto.coordinator_node.SigningRequest.transaction_data)
}

// uint32 threshold = 4;
inline void SigningRequest::clear_threshold() {
  _impl_.threshold_ = 0u;
}
inline uint32_t SigningRequest::_internal_threshold() const {
  return _impl_.threshold_;
}
inline uint32_t SigningRequest::threshold() const {
  // @@protoc_insertion_point(field_get:mpc_engine.proto.coordinator_node.SigningRequest.threshold)
  return _internal_threshold();
}
inline void SigningRequest::_internal_set_threshold(uint32_t value) {
  
  _impl_.threshold_ = value;
}
inline void SigningRequest::set_threshold(uint32_t value) {
  _internal_set_threshold(value);
  // @@protoc_insertion_point(field_set:mpc_engine.proto.coordinator_node.SigningRequest.threshold)
}

// uint32 total_shards = 5;
inline void SigningRequest::clear_total_shards() {
  _impl_.total_shards_ = 0u;
}
inline uint32_t SigningRequest::_internal_total_shards() const {
  return _impl_.total_shards_;
}
inline uint32_t SigningRequest::total_shards() const {
  // @@protoc_insertion_point(field_get:mpc_engine.proto.coordinator_node.SigningRequest.total_shards)
  return _internal_total_shards();
}
inline void SigningRequest::_internal_set_total_shards(uint32_t value) {
  
  _impl_.total_shards_ = value;
}
inline void SigningRequest::set_total_shards(uint32_t value) {
  _internal_set_total_shards(value);
  // @@protoc_insertion_point(field_set:mpc_engine.proto.coordinator_node.SigningRequest.total_shards)
}

// -------------------------------------------------------------------

// SigningResponse

// .mpc_engine.proto.coordinator_node.ResponseHeader header = 1;
inline bool SigningResponse::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool SigningResponse::has_header() const {
  return _internal_has_header();
}
inline const ::mpc_engine::proto::coordinator_node::ResponseHeader& SigningResponse::_internal_header() const {
  const ::mpc_engine::proto::coordinator_node::ResponseHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::mpc_engine::proto::coordinator_node::ResponseHeader&>(
      ::mpc_engine::proto::coordinator_node::_ResponseHeader_default_instance_);
}
inline const ::mpc_engine::proto::coordinator_node::ResponseHeader& SigningResponse::header() const {
  // @@protoc_insertion_point(field_get:mpc_engine.proto.coordinator_node.SigningResponse.header)
  return _internal_header();
}
inline void SigningResponse::unsafe_arena_set_allocated_header(
    ::mpc_engine::proto::coordinator_node::ResponseHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mpc_engine.proto.coordinator_node.SigningResponse.header)
}
inline ::mpc_engine::proto::coordinator_node::ResponseHeader* SigningResponse::release_header() {
  
  ::mpc_engine::proto::coordinator_node::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mpc_engine::proto::coordinator_node::ResponseHeader* SigningResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:mpc_engine.proto.coordinator_node.SigningResponse.header)
  
  ::mpc_engine::proto::coordinator_node::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::mpc_engine::proto::coordinator_node::ResponseHeader* SigningResponse::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::mpc_engine::proto::coordinator_node::ResponseHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::mpc_engine::proto::coordinator_node::ResponseHeader* SigningResponse::mutable_header() {
  ::mpc_engine::proto::coordinator_node::ResponseHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:mpc_engine.proto.coordinator_node.SigningResponse.header)
  return _msg;
}
inline void SigningResponse::set_allocated_header(::mpc_engine::proto::coordinator_node::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:mpc_engine.proto.coordinator_node.SigningResponse.header)
}

// string key_id = 2;
inline void SigningResponse::clear_key_id() {
  _impl_.key_id_.ClearToEmpty();
}
inline const std::string& SigningResponse::key_id() const {
  // @@protoc_insertion_point(field_get:mpc_engine.proto.coordinator_node.SigningResponse.key_id)
  return _internal_key_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningResponse::set_key_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mpc_engine.proto.coordinator_node.SigningResponse.key_id)
}
inline std::string* SigningResponse::mutable_key_id() {
  std::string* _s = _internal_mutable_key_id();
  // @@protoc_insertion_point(field_mutable:mpc_engine.proto.coordinator_node.SigningResponse.key_id)
  return _s;
}
inline const std::string& SigningResponse::_internal_key_id() const {
  return _impl_.key_id_.Get();
}
inline void SigningResponse::_internal_set_key_id(const std::string& value) {
  
  _impl_.key_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SigningResponse::_internal_mutable_key_id() {
  
  return _impl_.key_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SigningResponse::release_key_id() {
  // @@protoc_insertion_point(field_release:mpc_engine.proto.coordinator_node.SigningResponse.key_id)
  return _impl_.key_id_.Release();
}
inline void SigningResponse::set_allocated_key_id(std::string* key_id) {
  if (key_id != nullptr) {
    
  } else {
    
  }
  _impl_.key_id_.SetAllocated(key_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_id_.IsDefault()) {
    _impl_.key_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mpc_engine.proto.coordinator_node.SigningResponse.key_id)
}

// string signature = 3;
inline void SigningResponse::clear_signature() {
  _impl_.signature_.ClearToEmpty();
}
inline const std::string& SigningResponse::signature() const {
  // @@protoc_insertion_point(field_get:mpc_engine.proto.coordinator_node.SigningResponse.signature)
  return _internal_signature();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigningResponse::set_signature(ArgT0&& arg0, ArgT... args) {
 
 _impl_.signature_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mpc_engine.proto.coordinator_node.SigningResponse.signature)
}
inline std::string* SigningResponse::mutable_signature() {
  std::string* _s = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:mpc_engine.proto.coordinator_node.SigningResponse.signature)
  return _s;
}
inline const std::string& SigningResponse::_internal_signature() const {
  return _impl_.signature_.Get();
}
inline void SigningResponse::_internal_set_signature(const std::string& value) {
  
  _impl_.signature_.Set(value, GetArenaForAllocation());
}
inline std::string* SigningResponse::_internal_mutable_signature() {
  
  return _impl_.signature_.Mutable(GetArenaForAllocation());
}
inline std::string* SigningResponse::release_signature() {
  // @@protoc_insertion_point(field_release:mpc_engine.proto.coordinator_node.SigningResponse.signature)
  return _impl_.signature_.Release();
}
inline void SigningResponse::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  _impl_.signature_.SetAllocated(signature, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.signature_.IsDefault()) {
    _impl_.signature_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mpc_engine.proto.coordinator_node.SigningResponse.signature)
}

// uint32 shard_index = 4;
inline void SigningResponse::clear_shard_index() {
  _impl_.shard_index_ = 0u;
}
inline uint32_t SigningResponse::_internal_shard_index() const {
  return _impl_.shard_index_;
}
inline uint32_t SigningResponse::shard_index() const {
  // @@protoc_insertion_point(field_get:mpc_engine.proto.coordinator_node.SigningResponse.shard_index)
  return _internal_shard_index();
}
inline void SigningResponse::_internal_set_shard_index(uint32_t value) {
  
  _impl_.shard_index_ = value;
}
inline void SigningResponse::set_shard_index(uint32_t value) {
  _internal_set_shard_index(value);
  // @@protoc_insertion_point(field_set:mpc_engine.proto.coordinator_node.SigningResponse.shard_index)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace coordinator_node
}  // namespace proto
}  // namespace mpc_engine

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_signing_2eproto
